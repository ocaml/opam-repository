opam-version: "2.0"
maintainer:   "Thomas Gazagnaire <thomas@gazagnaire.org>"
authors:      ["Thomas Gazagnaire <thomas@gazagnaire.org"]
homepage:     "https://github.com/realworldocaml/mdx"
license:      "ISC"
dev-repo:     "git+https://github.com/realworldocaml/mdx.git"
bug-reports:  "https://github.com/realworldocaml/mdx/issues"
doc:          "https://realworldocaml.github.io/mdx/"

build: [
 ["dune" "subst"] {pinned}
 ["dune" "build" "-p" name "-j" jobs]
 ["dune" "runtest" "-p" name] {with-test}
]

depends: [
  "ocaml" {>= "4.02.3" & < "4.08.0"}
  "dune"
  "fmt"
  "cppo" {build}
  "astring"
  "logs"
  "cmdliner"
  "re" {>= "1.7.2"}
  "result"
  "ocaml-migrate-parsetree" {>= "1.0.6"}
  "lwt" {with-test}
  "conf-pandoc" {with-test}
]

synopsis: "Executable code blocks inside markdown files"
description: """
`mdx` allows to execute code blocks inside markdown files.
There are (currently) two sub-commands, corresponding
to two modes of operations: pre-processing (`mdx pp`)
and tests (`mdx test`).

The pre-processor mode allows to mix documentation and code,
and to practice "literate programming" using markdown and OCaml.

The test mode allows to ensure that shell scripts and OCaml fragments
in the documentation always stays up-to-date.

`mdx` is released as a single binary (called `mdx`).
"""
url {
  src:
    "https://github.com/realworldocaml/mdx/releases/download/1.2.0/mdx-1.2.0.tbz"
  checksum: "md5=c8237ce970b3e891d608bf061350552c"
}
