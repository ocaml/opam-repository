opam-version: "2.0"
name: "markup"
version: "0.7.5"
maintainer: "Anton Bachin <antonbachin@yahoo.com>"
authors: "Anton Bachin <antonbachin@yahoo.com>"
homepage: "https://github.com/aantron/markup.ml"
doc: "http://aantron.github.io/markup.ml"
bug-reports: "https://github.com/aantron/markup.ml/issues"
dev-repo: "git+https://github.com/aantron/markup.ml.git"
license: "BSD"
depends: [
  "ocaml"
  "uutf" {>= "1.0.0"}
  "ocamlfind" {build}
  "ocamlbuild" {build}
  "ounit" {with-test}
]
depopts: ["lwt"]
build: [
  [make "build"]
  [make "test"] {with-test}
  [make "docs"] {with-doc}
]
install: [make "ocamlfind-install"]
remove: ["ocamlfind" "remove" "markup"]
synopsis: "Error-recovering functional HTML5 and XML parsers and writers"
description: """
Markup.ml provides an HTML parser and an XML parser. The parsers are wrapped in
a simple interface: they are functions that transform byte streams to parsing
signal streams. Streams can be manipulated in various ways, such as processing
by fold, filter, and map, assembly into DOM tree structures, or serialization
back to HTML or XML.

Both parsers are based on their respective standards. The HTML parser, in
particular, is based on the state machines defined in HTML5.

The parsers are error-recovering by default, and accept fragments. This makes it
very easy to get a best-effort parse of some input. The parsers can, however, be
easily configured to be strict, and to accept only full documents.

Apart from this, the parsers are streaming (do not build up a document in
memory), non-blocking (can be used with threading libraries), lazy (do not
consume input unless the signal stream is being read), and process the input in
a single pass. They automatically detect the character encoding of the input
stream, and convert everything to UTF-8."""
flags: light-uninstall
url {
  src: "https://github.com/aantron/markup.ml/archive/0.7.5.tar.gz"
  checksum: "md5=968e485574a5b7d15e61376c937a368d"
}
