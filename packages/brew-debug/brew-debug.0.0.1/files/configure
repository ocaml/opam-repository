#! /bin/sh

# configuration script

# This file is part of the Zarith library
# http://forge.ocamlcore.org/projects/zarith .
# It is distributed under LGPL 2 licensing, with static linking exception.
# See the LICENSE file included in the distribution.
#
# Copyright (c) 2010-2011 Antoine Miné, Abstraction project.
# Abstraction is part of the LIENS (Laboratoire d'Informatique de l'ENS),
# a joint laboratory by:
# CNRS (Centre national de la recherche scientifique, France),
# ENS (École normale supérieure, Paris, France),
# INRIA Rocquencourt (Institut national de recherche en informatique, France).

set -xv

# options
installdir='auto'
ocamllibdir='auto'
host='auto'
gmp='auto'
perf='no'

ar='ar'
ocaml='ocaml'
ocamlc='ocamlc'
ocamlopt='ocamlopt'
ocamlmklib='ocamlmklib'
ocamldep='ocamldep'
ocamldoc='ocamldoc'
ccinc="$CPPFLAGS"
cclib="$LDFLAGS"
asopt=''
ccdef=''
mlflags="$OCAMLFLAGS"
mloptflags="$OCAMLOPTFLAGS"
mlinc="$OCAMLINC"
objsuffix="o"
ocamlfind="auto"

# sanitize
LC_ALL=C
export LC_ALL
unset IFS


# help
help()
{
    cat <<EOF
usage: configure [options]

where options include:
  -installdir dir      installation directory
  -ocamllibdir dir     ocaml library directory
  -host arch           host type, for platform-specific asm code
  -noasm               disable platform-specific asm code
  -gmp                 use GMP library (default if found)
  -mpir                use MPIR library instead of GMP
  -perf                enable performance statistics

Environment variables that affect configuration:
  CC                   C compiler to use (default: try gcc, then cc)
  CFLAGS               extra flags to pass to the C compiler
  CPPFLAGS             extra includes, e.g. -I/path/to/gmp/include
  LDFLAGS              extra link flags, e.g. -L/path/to/gmp/lib
  OCAMLFLAGS           extra flags to pass to the ocamlc Caml compiler
  OCAMLOPTFLAGS        extra flags to pass to the ocamlopt Caml compiler
  OCAMLINC             extra includes to pass to the Caml compilers
EOF
    exit
}

# parse arguments
while : ; do
    case "$1" in
        "")
            break;;
        -installdir|--installdir)
            installdir="$2"
            shift;;
        -ocamllibdir|--ocamllibdir)
            ocamllibdir="$2"
            shift;;
        -no-ocamlfind|--no-ocamlfind)
            ocamlfind="no"
            shift;;
        -host|--host)
            host="$2"
            shift;;
        -noasm|--no-asm)
            host='none';;
        -help|--help)
            help;;
        -gmp|--gmp)
            gmp='gmp';;
        -mpir|--mpir)
            gmp='mpir';;
        -perf|--perf)
            perf='yes';;
        *)
            echo "unknown option $1, try -help"
            exit 2;;
    esac
    shift
done

if test "$perf" = "yes"; then ccdef="-DZ_PERF_COUNTER $ccdef"; fi

echo_n()
{
    echo "$1" | tr -d '\012'
}

# checking binaries in $PATH

searchbin()
{
    if test "x$1" = "x"; then return 0; fi
    echo_n "binary $1: "
    IFS=':'
    for i in $PATH
    do
        if test -z "$i"; then i='.'; fi
        if test -x $i/$1; then echo "found in $i"; unset IFS; return 1; fi
    done
    echo "not found"
    unset IFS
    return 0
}

searchbinreq()
{
    searchbin $1
    if test $? -eq 0; then echo "required program $1 not found"; exit 2; fi
}


# checking includes and libraries

checkinc()
{
    echo_n "include $1: "
    rm -f tmp.c tmp.o
    echo "#include <$1>" > tmp.c
    echo "int main() { return 1; }" >> tmp.c
    r=1
    $cc $ccopt $ccinc -c tmp.c -o tmp.o >/dev/null 2>/dev/null || r=0
    if test ! -f tmp.o; then r=0; fi
    rm -f tmp.c tmp.o
    if test $r -eq 0; then echo "not found"; else echo "found"; fi
    return $r
}

checklib()
{
    echo_n "library $1: "
    rm -f tmp.c tmp.out
    echo "int main() { return 1; }" >> tmp.c
    r=1
    $cc $ccopt $cclib tmp.c -l$1 -o tmp.out >/dev/null 2>/dev/null || r=0
    if test ! -x tmp.out; then r=0; fi
    rm -f tmp.c tmp.o tmp.out
    if test $r -eq 0; then echo "not found"; else echo "found"; fi
    return $r
}

checkcc()
{
    echo_n "checking compilation with $cc $ccopt: "
    rm -f tmp.c tmp.out
    echo "int main() { return 1; }" >> tmp.c
    r=1
    $cc $ccopt tmp.c -o tmp.out >/dev/null 2>/dev/null || r=0
    if test ! -x tmp.out; then r=0; fi
    rm -f tmp.c tmp.o tmp.out
    if test $r -eq 0; then echo "not working"; else echo "working"; fi
    return $r
}

checkcmxalib()
{
    echo_n "library $1: "
    $ocamlopt $mloptflags $1 -o tmp.out >/dev/null 2>/dev/null || r=0
    if test ! -x tmp.out; then r=0; fi
    rm -f tmp.out
    if test $r -eq 0; then echo "not found"; else echo "found"; fi
    return $r
}


# check required programs

searchbinreq $ocaml
searchbinreq $ocamlc
searchbinreq $ocamldep
searchbinreq $ocamlmklib
searchbinreq $ocamldoc
searchbinreq $ar
searchbinreq perl

if test -n "$CC"; then
  searchbinreq "$CC"
  cc="$CC"
  ccopt="$CFLAGS"
elif ! searchbin 'gcc'; then
  cc='gcc'
  ccopt="-O3 -Wall -Wextra $CFLAGS"
else
  searchbinreq 'cc'
  cc='cc'
  ccopt="-O3 -Wall -Wextra $CFLAGS"
fi

# optional native-code generation

hasocamlopt='no'

searchbin $ocamlopt
if test $? -eq 1; then hasocamlopt='yes'; fi


# check C compiler

checkcc
if test $? -eq 0; then
    # try again with (almost) no options
    ccopt='-O'
    checkcc
    if test $? -eq 0; then echo "cannot compile and link program"; exit 2; fi
fi


# directories

if test "$ocamllibdir" = "auto"; then ocamllibdir=`ocamlc -where`; fi

# fails on Cygwin:
# if test ! -f "$ocamllibdir/caml/mlvalues.h"
# then echo "cannot find OCaml libraries in $ocamllibdir"; exit 2; fi
ccinc="-I$ocamllibdir $ccinc"
checkinc "caml/mlvalues.h"
if test $? -eq 0; then echo "cannot include caml/mlvalues.h"; exit 2; fi


# optional dynamic linking

hasdynlink='no'

if test $hasocamlopt = yes
then
    checkcmxalib dynlink.cmxa
    if test $? -eq 1; then hasdynlink='yes'; fi
fi


# installation method

searchbin ocamlfind
if test $? -eq 1 -a $ocamlfind != "no"; then
    instmeth='findlib'
    if test "$installdir" = "auto"
    then installdir=`ocamlfind printconf destdir`; fi
else
    searchbin install
    if test $? -eq 1; then instmeth='install'
    else echo "no installation method found"; exit 2; fi
    if test "$installdir" = "auto"; then installdir="$ocamllibdir"; fi
fi


# detect OCaml's word-size

echo "print_int (Sys.word_size);;" > tmp.ml
wordsize=`ocaml tmp.ml`
echo "OCaml's word size is $wordsize"
rm -f tmp.ml


# auto-detect host

if test "x$host" = 'xauto'; then
    searchbin uname
    if test $? -eq 0; then host='none'
    else host=`. ./config.guess`
    fi
fi


# set arch from host

arch='none'
case $host in
    x86_64-*linux-gnu|x86_64-kfreebsd-gnu)
        ccdef="-DZ_ELF -DZ_DOT_LABEL_PREFIX $ccdef"
        arch='x86_64';;
    i486-*linux-gnu|i686-*linux-gnu|i486-kfreebsd-gnu)
        ccdef="-DZ_ELF -DZ_DOT_LABEL_PREFIX $ccdef"
        arch='i686';;
    i686-*cygwin)
        if test "x$wordsize" = "x64"; then
            ccdef="-DZ_COFF $ccdef"
            arch='x86_64_mingw64'
        else
            ccdef="-DZ_UNDERSCORE_PREFIX -DZ_COFF $ccdef"
            arch='i686'
        fi
	;;
    i386-*darwin* | x86_64-*darwin*)
        ccdef="-DZ_UNDERSCORE_PREFIX -DZ_MACOS $ccdef"
        if test "x$wordsize" = "x64"; then
            ccopt="-arch x86_64 $ccopt"
            asopt="-arch x86_64 $asopt"
            arch='x86_64'
            checkcc
        else
            ccopt="-arch i386 $ccopt"
            asopt="-arch i386 $asopt"
            arch='i686'
            checkcc
        fi
        ;;
    armv7*-gnueabi)
        arch='arm'
        ;;
    none)
        ;;
    *)
        echo "unknown host $host";;
esac

if test "$arch" != 'none'; then
    if test ! -f "caml_z_${arch}.S"; then arch='none'; fi
fi


# check GMP, MPIR

if test "$gmp" = 'gmp' -o "$gmp" = 'auto'; then
    checkinc gmp.h
    if test $? -eq 1; then
        checklib gmp
        if test $? -eq 1; then
            gmp='OK'
            cclib="$cclib -lgmp"
            ccdef="-DHAS_GMP $ccdef"
        fi
    fi
fi
