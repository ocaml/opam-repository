diff --git a/_oasis b/_oasis
index 3197125..1fc7b53 100644
--- a/_oasis
+++ b/_oasis
@@ -9,6 +9,6 @@ BuildType:    Custom (0.2)
 InstallType:    Custom (0.2)
 XCustomBuild: yes no | omake --install; PREFIX=$prefix omake
 XCustomInstall: PREFIX=$prefix omake install
-XCustomUninstall: PREFIX=$prefix omake uninstall
+XCustomUninstall: yes no | omake --install; PREFIX=$prefix omake uninstall
 XCustomBuildClean: PREFIX=$prefix omake clean
 BuildTools: omake
diff --git a/setup.ml b/setup.ml
index 6152a68..402be2f 100644
--- a/setup.ml
+++ b/setup.ml
@@ -1,48 +1,58 @@
 (* setup.ml generated for the first time by OASIS v0.3.0 *)
 
 (* OASIS_START *)
-(* DO NOT EDIT (digest: 96c54ae40aba435fd1fd9372631873d1) *)
+(* DO NOT EDIT (digest: 8c21f4cc3c6c83143ad3abd2a73b1129) *)
 (*
-   Regenerated by OASIS v0.3.0
+   Regenerated by OASIS v0.4.6
    Visit http://oasis.forge.ocamlcore.org for more information and
    documentation about functions used in this file.
 *)
 module OASISGettext = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISGettext.ml" *)
+(* # 22 "src/oasis/OASISGettext.ml" *)
+
 
   let ns_ str =
     str
 
+
   let s_ str =
     str
 
-  let f_ (str : ('a, 'b, 'c, 'd) format4) =
+
+  let f_ (str: ('a, 'b, 'c, 'd) format4) =
     str
 
+
   let fn_ fmt1 fmt2 n =
     if n = 1 then
       fmt1^^""
     else
       fmt2^^""
 
+
   let init =
     []
 
+
 end
 
 module OASISContext = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISContext.ml" *)
+(* # 22 "src/oasis/OASISContext.ml" *)
+
 
   open OASISGettext
 
+
   type level =
     [ `Debug
     | `Info
     | `Warning
     | `Error]
 
+
   type t =
     {
+      (* TODO: replace this by a proplist. *)
       quiet:                 bool;
       info:                  bool;
       debug:                 bool;
@@ -51,6 +61,7 @@ module OASISContext = struct
       printf:                level -> string -> unit;
     }
 
+
   let printf lvl str =
     let beg =
       match lvl with
@@ -61,6 +72,7 @@ module OASISContext = struct
     in
       prerr_endline (beg^str)
 
+
   let default =
     ref
       {
@@ -72,37 +84,50 @@ module OASISContext = struct
         printf                = printf;
       }
 
+
   let quiet =
     {!default with quiet = true}
 
 
-  let args () =
+  let fspecs () =
+    (* TODO: don't act on default. *)
+    let ignore_plugins = ref false in
     ["-quiet",
      Arg.Unit (fun () -> default := {!default with quiet = true}),
-     (s_ " Run quietly");
+     s_ " Run quietly";
 
      "-info",
      Arg.Unit (fun () -> default := {!default with info = true}),
-     (s_ " Display information message");
+     s_ " Display information message";
 
 
      "-debug",
      Arg.Unit (fun () -> default := {!default with debug = true}),
-     (s_ " Output debug message")]
+     s_ " Output debug message";
+
+     "-ignore-plugins",
+     Arg.Set ignore_plugins,
+     s_ " Ignore plugin's field.";
+
+     "-C",
+     (* TODO: remove this chdir. *)
+     Arg.String (fun str -> Sys.chdir str),
+     s_ "dir Change directory before running."],
+    fun () -> {!default with ignore_plugins = !ignore_plugins}
 end
 
 module OASISString = struct
-(* # 1 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISString.ml" *)
-
+(* # 22 "src/oasis/OASISString.ml" *)
 
 
   (** Various string utilities.
-     
+
       Mostly inspired by extlib and batteries ExtString and BatString libraries.
 
       @author Sylvain Le Gall
     *)
 
+
   let nsplitf str f =
     if str = "" then
       []
@@ -123,16 +148,18 @@ module OASISString = struct
         push ();
         List.rev !lst
 
+
   (** [nsplit c s] Split the string [s] at char [c]. It doesn't include the
       separator.
     *)
   let nsplit str c =
     nsplitf str ((=) c)
 
+
   let find ~what ?(offset=0) str =
     let what_idx = ref 0 in
-    let str_idx = ref offset in 
-      while !str_idx < String.length str && 
+    let str_idx = ref offset in
+      while !str_idx < String.length str &&
             !what_idx < String.length what do
         if str.[!str_idx] = what.[!what_idx] then
           incr what_idx
@@ -142,16 +169,18 @@ module OASISString = struct
       done;
       if !what_idx <> String.length what then
         raise Not_found
-      else 
+      else
         !str_idx - !what_idx
 
-  let sub_start str len = 
+
+  let sub_start str len =
     let str_len = String.length str in
     if len >= str_len then
       ""
     else
       String.sub str len (str_len - len)
 
+
   let sub_end ?(offset=0) str len =
     let str_len = String.length str in
     if len >= str_len then
@@ -159,12 +188,13 @@ module OASISString = struct
     else
       String.sub str 0 (str_len - len)
 
+
   let starts_with ~what ?(offset=0) str =
     let what_idx = ref 0 in
     let str_idx = ref offset in
     let ok = ref true in
       while !ok &&
-            !str_idx < String.length str && 
+            !str_idx < String.length str &&
             !what_idx < String.length what do
         if str.[!str_idx] = what.[!what_idx] then
           incr what_idx
@@ -174,21 +204,23 @@ module OASISString = struct
       done;
       if !what_idx = String.length what then
         true
-      else 
+      else
         false
 
+
   let strip_starts_with ~what str =
     if starts_with ~what str then
       sub_start str (String.length what)
     else
       raise Not_found
 
+
   let ends_with ~what ?(offset=0) str =
     let what_idx = ref ((String.length what) - 1) in
     let str_idx = ref ((String.length str) - 1) in
     let ok = ref true in
       while !ok &&
-            offset <= !str_idx && 
+            offset <= !str_idx &&
             0 <= !what_idx do
         if str.[!str_idx] = what.[!what_idx] then
           decr what_idx
@@ -198,65 +230,137 @@ module OASISString = struct
       done;
       if !what_idx = -1 then
         true
-      else 
+      else
         false
 
+
   let strip_ends_with ~what str =
     if ends_with ~what str then
       sub_end str (String.length what)
     else
       raise Not_found
 
+
   let replace_chars f s =
-    let buf = String.make (String.length s) 'X' in
-      for i = 0 to String.length s - 1 do
-        buf.[i] <- f s.[i]
-      done;
-      buf
+    let buf = Buffer.create (String.length s) in
+    String.iter (fun c -> Buffer.add_char buf (f c)) s;
+    Buffer.contents buf
+
+  let lowercase_ascii =
+    replace_chars
+      (fun c ->
+         if (c >= 'A' && c <= 'Z') then
+           Char.chr (Char.code c + 32)
+         else
+           c)
+
+  let uncapitalize_ascii s =
+    if s <> "" then
+      (lowercase_ascii (String.sub s 0 1)) ^ (String.sub s 1 ((String.length s) - 1))
+    else
+      s
+
+  let uppercase_ascii =
+    replace_chars
+      (fun c ->
+         if (c >= 'a' && c <= 'z') then
+           Char.chr (Char.code c - 32)
+         else
+           c)
+
+  let capitalize_ascii s =
+    if s <> "" then
+      (uppercase_ascii (String.sub s 0 1)) ^ (String.sub s 1 ((String.length s) - 1))
+    else
+      s
 
 end
 
 module OASISUtils = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISUtils.ml" *)
+(* # 22 "src/oasis/OASISUtils.ml" *)
+
 
   open OASISGettext
 
-  module MapString = Map.Make(String)
 
-  let map_string_of_assoc assoc =
-    List.fold_left
-      (fun acc (k, v) -> MapString.add k v acc)
-      MapString.empty
-      assoc
+  module MapExt =
+  struct
+    module type S =
+    sig
+      include Map.S
+      val add_list: 'a t -> (key * 'a) list -> 'a t
+      val of_list: (key * 'a) list -> 'a t
+      val to_list: 'a t -> (key * 'a) list
+    end
+
+    module Make (Ord: Map.OrderedType) =
+    struct
+      include Map.Make(Ord)
+
+      let rec add_list t =
+        function
+          | (k, v) :: tl -> add_list (add k v t) tl
+          | [] -> t
 
-  module SetString = Set.Make(String)
+      let of_list lst = add_list empty lst
+
+      let to_list t = fold (fun k v acc -> (k, v) :: acc) t []
+    end
+  end
+
+
+  module MapString = MapExt.Make(String)
 
-  let set_string_add_list st lst =
-    List.fold_left
-      (fun acc e -> SetString.add e acc)
-      st
-      lst
 
-  let set_string_of_list =
-    set_string_add_list
-      SetString.empty
+  module SetExt  =
+  struct
+    module type S =
+    sig
+      include Set.S
+      val add_list: t -> elt list -> t
+      val of_list: elt list -> t
+      val to_list: t -> elt list
+    end
+
+    module Make (Ord: Set.OrderedType) =
+    struct
+      include Set.Make(Ord)
+
+      let rec add_list t =
+        function
+          | e :: tl -> add_list (add e t) tl
+          | [] -> t
+
+      let of_list lst = add_list empty lst
+
+      let to_list = elements
+    end
+  end
+
+
+  module SetString = SetExt.Make(String)
 
 
   let compare_csl s1 s2 =
-    String.compare (String.lowercase s1) (String.lowercase s2)
+    String.compare (OASISString.lowercase_ascii s1) (OASISString.lowercase_ascii s2)
+
 
   module HashStringCsl =
     Hashtbl.Make
       (struct
          type t = string
+         let equal s1 s2 = (compare_csl s1 s2) = 0
+         let hash s = Hashtbl.hash (OASISString.lowercase_ascii s)
+       end)
 
-         let equal s1 s2 =
-             (String.lowercase s1) = (String.lowercase s2)
-
-         let hash s =
-           Hashtbl.hash (String.lowercase s)
+  module SetStringCsl =
+    SetExt.Make
+      (struct
+         type t = string
+         let compare = compare_csl
        end)
 
+
   let varname_of_string ?(hyphen='_') s =
     if String.length s = 0 then
       begin
@@ -284,9 +388,10 @@ module OASISUtils = struct
           else
             buf
         in
-          String.lowercase buf
+          OASISString.lowercase_ascii buf
       end
 
+
   let varname_concat ?(hyphen='_') p s =
     let what = String.make 1 hyphen in
     let p =
@@ -307,42 +412,49 @@ module OASISUtils = struct
   let is_varname str =
     str = varname_of_string str
 
+
   let failwithf fmt = Printf.ksprintf failwith fmt
 
+
 end
 
 module PropList = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/PropList.ml" *)
+(* # 22 "src/oasis/PropList.ml" *)
+
 
   open OASISGettext
 
+
   type name = string
 
+
   exception Not_set of name * string option
   exception No_printer of name
   exception Unknown_field of name * name
 
+
   let () =
     Printexc.register_printer
       (function
          | Not_set (nm, Some rsn) ->
-             Some 
+             Some
                (Printf.sprintf (f_ "Field '%s' is not set: %s") nm rsn)
          | Not_set (nm, None) ->
-             Some 
+             Some
                (Printf.sprintf (f_ "Field '%s' is not set") nm)
          | No_printer nm ->
              Some
                (Printf.sprintf (f_ "No default printer for value %s") nm)
          | Unknown_field (nm, schm) ->
-             Some 
-               (Printf.sprintf (f_ "Field %s is not defined in schema %s") nm schm)
+             Some
+               (Printf.sprintf
+                  (f_ "Field %s is not defined in schema %s") nm schm)
          | _ ->
              None)
 
+
   module Data =
   struct
-
     type t =
         (name, unit -> unit) Hashtbl.t
 
@@ -352,12 +464,13 @@ module PropList = struct
     let clear t =
       Hashtbl.clear t
 
-(* # 71 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/PropList.ml" *)
+
+(* # 78 "src/oasis/PropList.ml" *)
   end
 
+
   module Schema =
   struct
-
     type ('ctxt, 'extra) value =
         {
           get:   Data.t -> string;
@@ -381,7 +494,7 @@ module PropList = struct
         order     = Queue.create ();
         name_norm =
           (if case_insensitive then
-             String.lowercase
+             OASISString.lowercase_ascii
            else
              fun s -> s);
       }
@@ -445,9 +558,9 @@ module PropList = struct
       t.name
   end
 
+
   module Field =
   struct
-
     type ('ctxt, 'value, 'extra) t =
         {
           set:    Data.t -> ?context:'ctxt -> 'value -> unit;
@@ -577,28 +690,27 @@ module PropList = struct
 
     let fgets data t =
       t.gets data
-
   end
 
+
   module FieldRO =
   struct
-
     let create ?schema ?name ?parse ?print ?default ?update ?help extra =
       let fld =
         Field.create ?schema ?name ?parse ?print ?default ?update ?help extra
       in
         fun data -> Field.fget data fld
-
   end
 end
 
 module OASISMessage = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISMessage.ml" *)
+(* # 22 "src/oasis/OASISMessage.ml" *)
 
 
   open OASISGettext
   open OASISContext
 
+
   let generic_message ~ctxt lvl fmt =
     let cond =
       if ctxt.quiet then
@@ -617,30 +729,39 @@ module OASISMessage = struct
              end)
         fmt
 
+
   let debug ~ctxt fmt =
     generic_message ~ctxt `Debug fmt
 
+
   let info ~ctxt fmt =
     generic_message ~ctxt `Info fmt
 
+
   let warning ~ctxt fmt =
     generic_message ~ctxt `Warning fmt
 
+
   let error ~ctxt fmt =
     generic_message ~ctxt `Error fmt
 
 end
 
 module OASISVersion = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISVersion.ml" *)
+(* # 22 "src/oasis/OASISVersion.ml" *)
+
 
   open OASISGettext
 
 
 
+
+
   type s = string
 
-  type t = string 
+
+  type t = string
+
 
   type comparator =
     | VGreater of t
@@ -650,20 +771,24 @@ module OASISVersion = struct
     | VLesserEqual of t
     | VOr of  comparator * comparator
     | VAnd of comparator * comparator
-    
+
+
 
   (* Range of allowed characters *)
   let is_digit c =
     '0' <= c && c <= '9'
 
+
   let is_alpha c =
     ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
 
+
   let is_special =
     function
       | '.' | '+' | '-' | '~' -> true
       | _ -> false
 
+
   let rec version_compare v1 v2 =
     if v1 <> "" || v2 <> "" then
       begin
@@ -707,11 +832,11 @@ module OASISVersion = struct
               while !p < String.length v && is_digit v.[!p] do
                 incr p
               done;
-              let substr = 
+              let substr =
                 String.sub v !p ((String.length v) - !p)
-              in 
-              let res = 
-                match String.sub v start_p (!p - start_p) with 
+              in
+              let res =
+                match String.sub v start_p (!p - start_p) with
                   | "" -> 0
                   | s -> int_of_string s
               in
@@ -747,8 +872,14 @@ module OASISVersion = struct
 
   let version_of_string str = str
 
+
   let string_of_version t = t
 
+
+  let version_compare_string s1 s2 =
+    version_compare (version_of_string s1) (version_of_string s2)
+
+
   let chop t =
     try
       let pos =
@@ -758,6 +889,7 @@ module OASISVersion = struct
     with Not_found ->
       t
 
+
   let rec comparator_apply v op =
     match op with
       | VGreater cv ->
@@ -775,6 +907,7 @@ module OASISVersion = struct
       | VAnd (op1, op2) ->
           (comparator_apply v op1) && (comparator_apply v op2)
 
+
   let rec string_of_comparator =
     function
       | VGreater v  -> "> "^(string_of_version v)
@@ -787,6 +920,7 @@ module OASISVersion = struct
       | VAnd (c1, c2) ->
           (string_of_comparator c1)^" && "^(string_of_comparator c2)
 
+
   let rec varname_of_comparator =
     let concat p v =
       OASISUtils.varname_concat
@@ -805,13 +939,24 @@ module OASISVersion = struct
         | VAnd (c1, c2) ->
             (varname_of_comparator c1)^"_and_"^(varname_of_comparator c2)
 
-  let version_0_3_or_after t =
-    comparator_apply t (VGreaterEqual (string_of_version "0.3"))
+
+  let rec comparator_ge v' =
+    let cmp v = version_compare v v' >= 0 in
+    function
+      | VEqual v
+      | VGreaterEqual v
+      | VGreater v -> cmp v
+      | VLesserEqual _
+      | VLesser _ -> false
+      | VOr (c1, c2) -> comparator_ge v' c1 || comparator_ge v' c2
+      | VAnd (c1, c2) -> comparator_ge v' c1 && comparator_ge v' c2
+
 
 end
 
 module OASISLicense = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISLicense.ml" *)
+(* # 22 "src/oasis/OASISLicense.ml" *)
+
 
   (** License for _oasis fields
       @author Sylvain Le Gall
@@ -819,15 +964,20 @@ module OASISLicense = struct
 
 
 
-  type license = string 
 
-  type license_exception = string 
+
+  type license = string
+
+
+  type license_exception = string
+
 
   type license_version =
     | Version of OASISVersion.t
     | VersionOrLater of OASISVersion.t
     | NoVersion
-    
+
+
 
   type license_dep_5_unit =
     {
@@ -835,31 +985,38 @@ module OASISLicense = struct
       excption:  license_exception option;
       version:   license_version;
     }
-    
+
+
 
   type license_dep_5 =
     | DEP5Unit of license_dep_5_unit
     | DEP5Or of license_dep_5 list
     | DEP5And of license_dep_5 list
-    
+
 
   type t =
     | DEP5License of license_dep_5
     | OtherLicense of string (* URL *)
-    
+
+
 
 end
 
 module OASISExpr = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISExpr.ml" *)
+(* # 22 "src/oasis/OASISExpr.ml" *)
+
+
 
 
 
   open OASISGettext
 
-  type test = string 
 
-  type flag = string 
+  type test = string
+
+
+  type flag = string
+
 
   type t =
     | EBool of bool
@@ -868,9 +1025,11 @@ module OASISExpr = struct
     | EOr of t * t
     | EFlag of flag
     | ETest of test * string
-    
 
-  type 'a choices = (t * 'a) list 
+
+
+  type 'a choices = (t * 'a) list
+
 
   let eval var_get t =
     let rec eval' =
@@ -902,6 +1061,7 @@ module OASISExpr = struct
     in
       eval' t
 
+
   let choose ?printer ?name var_get lst =
     let rec choose_aux =
       function
@@ -938,44 +1098,66 @@ module OASISExpr = struct
     in
       choose_aux (List.rev lst)
 
+
+end
+
+module OASISText = struct
+(* # 22 "src/oasis/OASISText.ml" *)
+
+
+
+  type elt =
+    | Para of string
+    | Verbatim of string
+    | BlankLine
+
+
+  type t = elt list
+
 end
 
 module OASISTypes = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISTypes.ml" *)
+(* # 22 "src/oasis/OASISTypes.ml" *)
+
+
+
 
 
+  type name          = string
+  type package_name  = string
+  type url           = string
+  type unix_dirname  = string
+  type unix_filename = string
+  type host_dirname  = string
+  type host_filename = string
+  type prog          = string
+  type arg           = string
+  type args          = string list
+  type command_line  = (prog * arg list)
 
 
-  type name          = string 
-  type package_name  = string 
-  type url           = string 
-  type unix_dirname  = string 
-  type unix_filename = string 
-  type host_dirname  = string 
-  type host_filename = string 
-  type prog          = string 
-  type arg           = string 
-  type args          = string list 
-  type command_line  = (prog * arg list) 
+  type findlib_name = string
+  type findlib_full = string
 
-  type findlib_name = string 
-  type findlib_full = string 
 
   type compiled_object =
     | Byte
     | Native
     | Best
-    
+
+
 
   type dependency =
     | FindlibPackage of findlib_full * OASISVersion.comparator option
     | InternalLibrary of name
-    
+
+
 
   type tool =
     | ExternalTool of name
     | InternalExecutable of name
-    
+
+
 
   type vcs =
     | Darcs
@@ -987,7 +1169,8 @@ module OASISTypes = struct
     | Arch
     | Monotone
     | OtherVCS of url
-    
+
+
 
   type plugin_kind =
       [  `Configure
@@ -998,6 +1181,7 @@ module OASISTypes = struct
        | `Extra
       ]
 
+
   type plugin_data_purpose =
       [  `Configure
        | `Build
@@ -1012,22 +1196,29 @@ module OASISTypes = struct
        | `Other of string
       ]
 
-  type 'a plugin = 'a * name * OASISVersion.t option 
+
+  type 'a plugin = 'a * name * OASISVersion.t option
+
 
   type all_plugin = plugin_kind plugin
 
+
   type plugin_data = (all_plugin * plugin_data_purpose * (unit -> unit)) list
 
-(* # 102 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISTypes.ml" *)
 
-  type 'a conditional = 'a OASISExpr.choices 
+(* # 115 "src/oasis/OASISTypes.ml" *)
+
+
+  type 'a conditional = 'a OASISExpr.choices
+
 
   type custom =
       {
         pre_command:  (command_line option) conditional;
         post_command: (command_line option) conditional;
       }
-      
+
+
 
   type common_section =
       {
@@ -1035,7 +1226,8 @@ module OASISTypes = struct
         cs_data: PropList.Data.t;
         cs_plugin_data: plugin_data;
       }
-      
+
+
 
   type build_section =
       {
@@ -1054,7 +1246,8 @@ module OASISTypes = struct
         bs_byteopt:         args conditional;
         bs_nativeopt:       args conditional;
       }
-      
+
+
 
   type library =
       {
@@ -1064,19 +1257,29 @@ module OASISTypes = struct
         lib_findlib_parent:     findlib_name option;
         lib_findlib_name:       findlib_name option;
         lib_findlib_containers: findlib_name list;
-      } 
+      }
+
+
+  type object_ =
+      {
+        obj_modules:            string list;
+        obj_findlib_fullname:   findlib_name list option;
+      }
+
 
   type executable =
       {
         exec_custom:          bool;
         exec_main_is:         unix_filename;
-      } 
+      }
+
 
   type flag =
       {
         flag_description:  string option;
         flag_default:      bool conditional;
-      } 
+      }
+
 
   type source_repository =
       {
@@ -1087,7 +1290,8 @@ module OASISTypes = struct
         src_repo_branch:      string option;
         src_repo_tag:         string option;
         src_repo_subdir:      unix_filename option;
-      } 
+      }
+
 
   type test =
       {
@@ -1097,7 +1301,8 @@ module OASISTypes = struct
         test_working_directory:  unix_filename option;
         test_run:                bool conditional;
         test_tools:              tool list;
-      } 
+      }
+
 
   type doc_format =
     | HTML of unix_filename
@@ -1107,90 +1312,475 @@ module OASISTypes = struct
     | Info of unix_filename
     | DVI
     | OtherDoc
-    
 
-  type doc =
-      {
-        doc_type:        [`Doc] plugin;
-        doc_custom:      custom;
-        doc_build:       bool conditional;
-        doc_install:     bool conditional;
-        doc_install_dir: unix_filename;
-        doc_title:       string;
-        doc_authors:     string list;
-        doc_abstract:    string option;
-        doc_format:      doc_format;
-        doc_data_files:  (unix_filename * unix_filename option) list;
-        doc_build_tools: tool list;
-      } 
 
-  type section =
-    | Library    of common_section * build_section * library
-    | Executable of common_section * build_section * executable
-    | Flag       of common_section * flag
-    | SrcRepo    of common_section * source_repository
-    | Test       of common_section * test
-    | Doc        of common_section * doc
-    
 
-  type section_kind =
-      [ `Library | `Executable | `Flag | `SrcRepo | `Test | `Doc ]
+  type doc =
+      {
+        doc_type:        [`Doc] plugin;
+        doc_custom:      custom;
+        doc_build:       bool conditional;
+        doc_install:     bool conditional;
+        doc_install_dir: unix_filename;
+        doc_title:       string;
+        doc_authors:     string list;
+        doc_abstract:    string option;
+        doc_format:      doc_format;
+        doc_data_files:  (unix_filename * unix_filename option) list;
+        doc_build_tools: tool list;
+      }
+
+
+  type section =
+    | Library    of common_section * build_section * library
+    | Object     of common_section * build_section * object_
+    | Executable of common_section * build_section * executable
+    | Flag       of common_section * flag
+    | SrcRepo    of common_section * source_repository
+    | Test       of common_section * test
+    | Doc        of common_section * doc
+
+
+
+  type section_kind =
+      [ `Library | `Object | `Executable | `Flag | `SrcRepo | `Test | `Doc ]
+
+
+  type package =
+      {
+        oasis_version:          OASISVersion.t;
+        ocaml_version:          OASISVersion.comparator option;
+        findlib_version:        OASISVersion.comparator option;
+        alpha_features:         string list;
+        beta_features:          string list;
+        name:                   package_name;
+        version:                OASISVersion.t;
+        license:                OASISLicense.t;
+        license_file:           unix_filename option;
+        copyrights:             string list;
+        maintainers:            string list;
+        authors:                string list;
+        homepage:               url option;
+        synopsis:               string;
+        description:            OASISText.t option;
+        categories:             url list;
+
+        conf_type:              [`Configure] plugin;
+        conf_custom:            custom;
+
+        build_type:             [`Build] plugin;
+        build_custom:           custom;
+
+        install_type:           [`Install] plugin;
+        install_custom:         custom;
+        uninstall_custom:       custom;
+
+        clean_custom:           custom;
+        distclean_custom:       custom;
+
+        files_ab:               unix_filename list;
+        sections:               section list;
+        plugins:                [`Extra] plugin list;
+        disable_oasis_section:  unix_filename list;
+        schema_data:            PropList.Data.t;
+        plugin_data:            plugin_data;
+      }
+
+
+end
+
+module OASISFeatures = struct
+(* # 22 "src/oasis/OASISFeatures.ml" *)
+
+  open OASISTypes
+  open OASISUtils
+  open OASISGettext
+  open OASISVersion
+
+  module MapPlugin =
+    Map.Make
+      (struct
+         type t = plugin_kind * name
+         let compare = Pervasives.compare
+       end)
+
+  module Data =
+  struct
+    type t =
+        {
+          oasis_version: OASISVersion.t;
+          plugin_versions: OASISVersion.t option MapPlugin.t;
+          alpha_features: string list;
+          beta_features: string list;
+        }
+
+    let create oasis_version alpha_features beta_features =
+      {
+        oasis_version = oasis_version;
+        plugin_versions = MapPlugin.empty;
+        alpha_features = alpha_features;
+        beta_features = beta_features
+      }
+
+    let of_package pkg =
+      create
+        pkg.OASISTypes.oasis_version
+        pkg.OASISTypes.alpha_features
+        pkg.OASISTypes.beta_features
+
+    let add_plugin (plugin_kind, plugin_name, plugin_version) t =
+      {t with
+           plugin_versions = MapPlugin.add
+                               (plugin_kind, plugin_name)
+                               plugin_version
+                               t.plugin_versions}
+
+    let plugin_version plugin_kind plugin_name t =
+      MapPlugin.find (plugin_kind, plugin_name) t.plugin_versions
+
+    let to_string t =
+      Printf.sprintf
+        "oasis_version: %s; alpha_features: %s; beta_features: %s; \
+         plugins_version: %s"
+        (OASISVersion.string_of_version t.oasis_version)
+        (String.concat ", " t.alpha_features)
+        (String.concat ", " t.beta_features)
+        (String.concat ", "
+           (MapPlugin.fold
+              (fun (_, plg) ver_opt acc ->
+                 (plg^
+                  (match ver_opt with
+                     | Some v ->
+                         " "^(OASISVersion.string_of_version v)
+                     | None -> ""))
+                 :: acc)
+              t.plugin_versions []))
+  end
+
+  type origin =
+    | Field of string * string
+    | Section of string
+    | NoOrigin
+
+  type stage = Alpha | Beta
+
+
+  let string_of_stage =
+    function
+      | Alpha -> "alpha"
+      | Beta -> "beta"
+
+
+  let field_of_stage =
+    function
+      | Alpha -> "AlphaFeatures"
+      | Beta -> "BetaFeatures"
+
+  type publication = InDev of stage | SinceVersion of OASISVersion.t
+
+  type t =
+      {
+        name: string;
+        plugin: all_plugin option;
+        publication: publication;
+        description: unit -> string;
+      }
+
+  (* TODO: mutex protect this. *)
+  let all_features = Hashtbl.create 13
+
+
+  let since_version ver_str = SinceVersion (version_of_string ver_str)
+  let alpha = InDev Alpha
+  let beta = InDev Beta
+
+
+  let to_string t =
+    Printf.sprintf
+      "feature: %s; plugin: %s; publication: %s"
+      t.name
+      (match t.plugin with
+         | None -> "<none>"
+         | Some (_, nm, _) -> nm)
+      (match t.publication with
+         | InDev stage -> string_of_stage stage
+         | SinceVersion ver -> ">= "^(OASISVersion.string_of_version ver))
+
+  let data_check t data origin =
+    let no_message = "no message" in
+
+    let check_feature features stage =
+      let has_feature = List.mem t.name features in
+      if not has_feature then
+        match origin with
+          | Field (fld, where) ->
+              Some
+                (Printf.sprintf
+                   (f_ "Field %s in %s is only available when feature %s \
+                        is in field %s.")
+                   fld where t.name (field_of_stage stage))
+          | Section sct ->
+              Some
+                (Printf.sprintf
+                   (f_ "Section %s is only available when features %s \
+                        is in field %s.")
+                   sct t.name (field_of_stage stage))
+          | NoOrigin ->
+              Some no_message
+      else
+        None
+    in
+
+    let version_is_good ~min_version version fmt =
+      let version_is_good =
+        OASISVersion.comparator_apply
+          version (OASISVersion.VGreaterEqual min_version)
+      in
+        Printf.ksprintf
+          (fun str ->
+             if version_is_good then
+               None
+             else
+               Some str)
+          fmt
+    in
+
+    match origin, t.plugin, t.publication with
+      | _, _, InDev Alpha -> check_feature data.Data.alpha_features Alpha
+      | _, _, InDev Beta -> check_feature data.Data.beta_features Beta
+      | Field(fld, where), None, SinceVersion min_version ->
+          version_is_good ~min_version data.Data.oasis_version
+            (f_ "Field %s in %s is only valid since OASIS v%s, update \
+                 OASISFormat field from '%s' to '%s' after checking \
+                 OASIS changelog.")
+            fld where (string_of_version min_version)
+            (string_of_version data.Data.oasis_version)
+            (string_of_version min_version)
+
+      | Field(fld, where), Some(plugin_knd, plugin_name, _),
+        SinceVersion min_version ->
+          begin
+            try
+              let plugin_version_current =
+                try
+                  match Data.plugin_version plugin_knd plugin_name data with
+                    | Some ver -> ver
+                    | None ->
+                        failwithf
+                          (f_ "Field %s in %s is only valid for the OASIS \
+                               plugin %s since v%s, but no plugin version is \
+                               defined in the _oasis file, change '%s' to \
+                               '%s (%s)' in your _oasis file.")
+                          fld where plugin_name (string_of_version min_version)
+                          plugin_name
+                          plugin_name (string_of_version min_version)
+                with Not_found ->
+                  failwithf
+                    (f_ "Field %s in %s is only valid when the OASIS plugin %s \
+                         is defined.")
+                    fld where plugin_name
+              in
+              version_is_good ~min_version plugin_version_current
+                (f_ "Field %s in %s is only valid for the OASIS plugin %s \
+                     since v%s, update your plugin from '%s (%s)' to \
+                     '%s (%s)' after checking the plugin's changelog.")
+                fld where plugin_name (string_of_version min_version)
+                plugin_name (string_of_version plugin_version_current)
+                plugin_name (string_of_version min_version)
+            with Failure msg ->
+              Some msg
+          end
+
+      | Section sct, None, SinceVersion min_version ->
+          version_is_good ~min_version data.Data.oasis_version
+            (f_ "Section %s is only valid for since OASIS v%s, update \
+                 OASISFormat field from '%s' to '%s' after checking OASIS \
+                 changelog.")
+            sct (string_of_version min_version)
+            (string_of_version data.Data.oasis_version)
+            (string_of_version min_version)
+
+      | Section sct, Some(plugin_knd, plugin_name, _),
+        SinceVersion min_version ->
+          begin
+            try
+              let plugin_version_current =
+                try
+                  match Data.plugin_version plugin_knd plugin_name data with
+                    | Some ver -> ver
+                    | None ->
+                        failwithf
+                          (f_ "Section %s is only valid for the OASIS \
+                               plugin %s since v%s, but no plugin version is \
+                               defined in the _oasis file, change '%s' to \
+                               '%s (%s)' in your _oasis file.")
+                          sct plugin_name (string_of_version min_version)
+                          plugin_name
+                          plugin_name (string_of_version min_version)
+                with Not_found ->
+                  failwithf
+                    (f_ "Section %s is only valid when the OASIS plugin %s \
+                         is defined.")
+                    sct plugin_name
+              in
+              version_is_good ~min_version plugin_version_current
+                (f_ "Section %s is only valid for the OASIS plugin %s \
+                     since v%s, update your plugin from '%s (%s)' to \
+                     '%s (%s)' after checking the plugin's changelog.")
+                sct plugin_name (string_of_version min_version)
+                plugin_name (string_of_version plugin_version_current)
+                plugin_name (string_of_version min_version)
+            with Failure msg ->
+              Some msg
+          end
+
+      | NoOrigin, None, SinceVersion min_version ->
+          version_is_good ~min_version data.Data.oasis_version "%s" no_message
+
+      | NoOrigin, Some(plugin_knd, plugin_name, _), SinceVersion min_version ->
+          begin
+            try
+              let plugin_version_current =
+                match Data.plugin_version plugin_knd plugin_name data with
+                  | Some ver -> ver
+                  | None -> raise Not_found
+              in
+              version_is_good ~min_version plugin_version_current
+                "%s" no_message
+            with Not_found ->
+              Some no_message
+          end
+
+
+  let data_assert t data origin =
+    match data_check t data origin with
+      | None -> ()
+      | Some str -> failwith str
+
+
+  let data_test t data =
+    match data_check t data NoOrigin with
+      | None -> true
+      | Some str -> false
+
+
+  let package_test t pkg =
+    data_test t (Data.of_package pkg)
+
+
+  let create ?plugin name publication description =
+    let () =
+      if Hashtbl.mem all_features name then
+        failwithf "Feature '%s' is already declared." name
+    in
+    let t =
+      {
+        name = name;
+        plugin = plugin;
+        publication = publication;
+        description = description;
+      }
+    in
+      Hashtbl.add all_features name t;
+      t
+
+
+  let get_stage name =
+    try
+      (Hashtbl.find all_features name).publication
+    with Not_found ->
+      failwithf (f_ "Feature %s doesn't exist.") name
+
+
+  let list () =
+    Hashtbl.fold (fun _ v acc -> v :: acc) all_features []
+
+  (*
+   * Real flags.
+   *)
+
+
+  let features =
+    create "features_fields"
+      (since_version "0.4")
+      (fun () ->
+         s_ "Enable to experiment not yet official features.")
+
+
+  let flag_docs =
+    create "flag_docs"
+      (since_version "0.3")
+      (fun () ->
+         s_ "Building docs require '-docs' flag at configure.")
+
+
+  let flag_tests =
+    create "flag_tests"
+      (since_version "0.3")
+      (fun () ->
+         s_ "Running tests require '-tests' flag at configure.")
+
+
+  let pack =
+    create "pack"
+      (since_version "0.3")
+      (fun () ->
+         s_ "Allow to create packed library.")
+
+
+  let section_object =
+    create "section_object" beta
+      (fun () ->
+         s_ "Implement an object section.")
 
-  type package = 
-      {
-        oasis_version:    OASISVersion.t;
-        ocaml_version:    OASISVersion.comparator option;
-        findlib_version:  OASISVersion.comparator option;
-        name:             package_name;
-        version:          OASISVersion.t;
-        license:          OASISLicense.t;
-        license_file:     unix_filename option;
-        copyrights:       string list;
-        maintainers:      string list;
-        authors:          string list;
-        homepage:         url option;
-        synopsis:         string;
-        description:      string option;
-        categories:       url list;
-
-        conf_type:        [`Configure] plugin;
-        conf_custom:      custom;
-
-        build_type:       [`Build] plugin;
-        build_custom:     custom;
-
-        install_type:     [`Install] plugin;
-        install_custom:   custom;
-        uninstall_custom: custom;
-
-        clean_custom:     custom;
-        distclean_custom: custom;
-
-        files_ab:         unix_filename list;
-        sections:         section list;
-        plugins:          [`Extra] plugin list;
-        schema_data:      PropList.Data.t;
-        plugin_data:      plugin_data;
-      } 
 
+  let dynrun_for_release =
+    create "dynrun_for_release" alpha
+      (fun () ->
+         s_ "Make '-setup-update dynamic' suitable for releasing project.")
+
+
+  let compiled_setup_ml =
+    create "compiled_setup_ml" alpha
+      (fun () ->
+         s_ "It compiles the setup.ml and speed-up actions done with it.")
+
+  let disable_oasis_section =
+    create "disable_oasis_section" alpha
+      (fun () ->
+        s_ "Allows the OASIS section comments and digest to be omitted in \
+            generated files.")
+
+  let no_automatic_syntax =
+    create "no_automatic_syntax" alpha
+      (fun () ->
+         s_ "Disable the automatic inclusion of -syntax camlp4o for packages \
+             that matches the internal heuristic (if a dependency ends with \
+             a .syntax or is a well known syntax).")
 end
 
 module OASISUnixPath = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISUnixPath.ml" *)
+(* # 22 "src/oasis/OASISUnixPath.ml" *)
+
 
   type unix_filename = string
   type unix_dirname = string
 
+
   type host_filename = string
   type host_dirname = string
 
+
   let current_dir_name = "."
 
+
   let parent_dir_name = ".."
 
+
   let is_current_dir fn =
     fn = current_dir_name || fn = ""
 
+
   let concat f1 f2 =
     if is_current_dir f1 then
       f2
@@ -1200,6 +1790,7 @@ module OASISUnixPath = struct
       in
         f1'^"/"^f2
 
+
   let make =
     function
       | hd :: tl ->
@@ -1210,12 +1801,14 @@ module OASISUnixPath = struct
       | [] ->
           invalid_arg "OASISUnixPath.make"
 
+
   let dirname f =
     try
       String.sub f 0 (String.rindex f '/')
     with Not_found ->
       current_dir_name
 
+
   let basename f =
     try
       let pos_start =
@@ -1225,6 +1818,7 @@ module OASISUnixPath = struct
     with Not_found ->
       f
 
+
   let chop_extension f =
     try
       let last_dot =
@@ -1247,26 +1841,31 @@ module OASISUnixPath = struct
     with Not_found ->
       f
 
+
   let capitalize_file f =
     let dir = dirname f in
     let base = basename f in
-    concat dir (String.capitalize base)
+    concat dir (OASISString.capitalize_ascii base)
+
 
   let uncapitalize_file f =
     let dir = dirname f in
     let base = basename f in
-    concat dir (String.uncapitalize base)
+    concat dir (OASISString.uncapitalize_ascii base)
+
 
 end
 
 module OASISHostPath = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISHostPath.ml" *)
+(* # 22 "src/oasis/OASISHostPath.ml" *)
 
 
   open Filename
 
+
   module Unix = OASISUnixPath
 
+
   let make =
     function
       | [] ->
@@ -1274,6 +1873,7 @@ module OASISHostPath = struct
       | hd :: tl ->
           List.fold_left Filename.concat hd tl
 
+
   let of_unix ufn =
     if Sys.os_type = "Unix" then
       ufn
@@ -1293,14 +1893,18 @@ module OASISHostPath = struct
 end
 
 module OASISSection = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISSection.ml" *)
+(* # 22 "src/oasis/OASISSection.ml" *)
+
 
   open OASISTypes
 
-  let section_kind_common = 
+
+  let section_kind_common =
     function
-      | Library (cs, _, _) -> 
+      | Library (cs, _, _) ->
           `Library, cs
+      | Object (cs, _, _) ->
+          `Object, cs
       | Executable (cs, _, _) ->
           `Executable, cs
       | Flag (cs, _) ->
@@ -1312,32 +1916,38 @@ module OASISSection = struct
       | Doc (cs, _) ->
           `Doc, cs
 
+
   let section_common sct =
     snd (section_kind_common sct)
 
+
   let section_common_set cs =
     function
       | Library (_, bs, lib)     -> Library (cs, bs, lib)
+      | Object (_, bs, obj)      -> Object (cs, bs, obj)
       | Executable (_, bs, exec) -> Executable (cs, bs, exec)
       | Flag (_, flg)            -> Flag (cs, flg)
       | SrcRepo (_, src_repo)    -> SrcRepo (cs, src_repo)
       | Test (_, tst)            -> Test (cs, tst)
       | Doc (_, doc)             -> Doc (cs, doc)
 
+
   (** Key used to identify section
     *)
-  let section_id sct = 
-    let k, cs = 
+  let section_id sct =
+    let k, cs =
       section_kind_common sct
     in
       k, cs.cs_name
 
+
   let string_of_section sct =
     let k, nm =
       section_id sct
     in
       (match k with
-         | `Library    -> "library" 
+         | `Library    -> "library"
+         | `Object     -> "object"
          | `Executable -> "executable"
          | `Flag       -> "flag"
          | `SrcRepo    -> "src repository"
@@ -1345,20 +1955,22 @@ module OASISSection = struct
          | `Doc        -> "doc")
       ^" "^nm
 
+
   let section_find id scts =
     List.find
       (fun sct -> id = section_id sct)
       scts
 
+
   module CSection =
   struct
     type t = section
 
     let id = section_id
 
-    let compare t1 t2 = 
+    let compare t1 t2 =
       compare (id t1) (id t2)
-      
+
     let equal t1 t2 =
       (id t1) = (id t2)
 
@@ -1366,28 +1978,33 @@ module OASISSection = struct
       Hashtbl.hash (id t)
   end
 
+
   module MapSection = Map.Make(CSection)
   module SetSection = Set.Make(CSection)
 
+
 end
 
 module OASISBuildSection = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISBuildSection.ml" *)
+(* # 22 "src/oasis/OASISBuildSection.ml" *)
+
 
 end
 
 module OASISExecutable = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISExecutable.ml" *)
+(* # 22 "src/oasis/OASISExecutable.ml" *)
+
 
   open OASISTypes
 
-  let unix_exec_is (cs, bs, exec) is_native ext_dll suffix_program = 
-    let dir = 
+
+  let unix_exec_is (cs, bs, exec) is_native ext_dll suffix_program =
+    let dir =
       OASISUnixPath.concat
         bs.bs_path
         (OASISUnixPath.dirname exec.exec_main_is)
     in
-    let is_native_exec = 
+    let is_native_exec =
       match bs.bs_compiled_object with
         | Native -> true
         | Best -> is_native ()
@@ -1398,40 +2015,28 @@ module OASISExecutable = struct
         dir
         (cs.cs_name^(suffix_program ())),
 
-      if not is_native_exec && 
-         not exec.exec_custom && 
+      if not is_native_exec &&
+         not exec.exec_custom &&
          bs.bs_c_sources <> [] then
         Some (dir^"/dll"^cs.cs_name^"_stubs"^(ext_dll ()))
       else
         None
 
+
 end
 
 module OASISLibrary = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISLibrary.ml" *)
+(* # 22 "src/oasis/OASISLibrary.ml" *)
+
 
   open OASISTypes
   open OASISUtils
   open OASISGettext
   open OASISSection
 
-  type library_name = name
-  type findlib_part_name = name
-  type 'a map_of_findlib_part_name = 'a OASISUtils.MapString.t
-
-  exception InternalLibraryNotFound of library_name
-  exception FindlibPackageNotFound of findlib_name
-
-  type group_t =
-    | Container of findlib_name * group_t list
-    | Package of (findlib_name *
-                  common_section *
-                  build_section *
-                  library *
-                  group_t list)
 
   (* Look for a module file, considering capitalization or not. *)
-  let find_module source_file_exists (cs, bs, lib) modul =
+  let find_module source_file_exists bs modul =
     let possible_base_fn =
       List.map
         (OASISUnixPath.concat bs.bs_path)
@@ -1469,10 +2074,11 @@ module OASISLibrary = struct
         (`No_sources possible_base_fn)
         possible_base_fn
 
+
   let source_unix_files ~ctxt (cs, bs, lib) source_file_exists =
     List.fold_left
       (fun acc modul ->
-         match find_module source_file_exists (cs, bs, lib) modul with
+         match find_module source_file_exists bs modul with
            | `Sources (base_fn, lst) ->
                (base_fn, lst) :: acc
            | `No_sources _ ->
@@ -1485,6 +2091,7 @@ module OASISLibrary = struct
       []
       (lib.lib_modules @ lib.lib_internal_modules)
 
+
   let generated_unix_files
         ~ctxt
         ~is_native
@@ -1494,50 +2101,49 @@ module OASISLibrary = struct
         ~source_file_exists
         (cs, bs, lib) =
 
-    let find_modules lst ext = 
+    let find_modules lst ext =
       let find_module modul =
-        match find_module source_file_exists (cs, bs, lib) modul with
+        match find_module source_file_exists bs modul with
+          | `Sources (base_fn, [fn]) when ext <> "cmi"
+                                       && Filename.check_suffix fn ".mli" ->
+              None (* No implementation files for pure interface. *)
           | `Sources (base_fn, _) ->
-              [base_fn]
+              Some [base_fn]
           | `No_sources lst ->
               OASISMessage.warning
                 ~ctxt
                 (f_ "Cannot find source file matching \
                      module '%s' in library %s")
                 modul cs.cs_name;
-              lst
+              Some lst
       in
-      List.map 
-        (fun nm -> 
-           List.map 
-             (fun base_fn -> base_fn ^"."^ext)
-             (find_module nm))
-        lst
-    in
-
-    (* The headers that should be compiled along *)
-    let headers =
-      if lib.lib_pack then
+      List.fold_left
+        (fun acc nm ->
+          match find_module nm with
+            | None -> acc
+            | Some base_fns ->
+                List.map (fun base_fn -> base_fn ^"."^ext) base_fns :: acc)
         []
-      else
-        find_modules
-          lib.lib_modules
-          "cmi"
+        lst
     in
 
     (* The .cmx that be compiled along *)
     let cmxs =
       let should_be_built =
-        (not lib.lib_pack) && (* Do not install .cmx packed submodules *)
         match bs.bs_compiled_object with
           | Native -> true
           | Best -> is_native
           | Byte -> false
       in
         if should_be_built then
-          find_modules
-            (lib.lib_modules @ lib.lib_internal_modules)
-            "cmx"
+          if lib.lib_pack then
+            find_modules
+              [cs.cs_name]
+              "cmx"
+          else
+            find_modules
+              (lib.lib_modules @ lib.lib_internal_modules)
+              "cmx"
         else
           []
     in
@@ -1546,12 +2152,32 @@ module OASISLibrary = struct
       []
     in
 
+    (* The headers and annot/cmt files that should be compiled along *)
+    let headers =
+      let sufx =
+        if lib.lib_pack
+        then [".cmti"; ".cmt"; ".annot"]
+        else [".cmi"; ".cmti"; ".cmt"; ".annot"]
+      in
+      List.map
+        begin
+          List.fold_left
+            begin fun accu s ->
+              let dot = String.rindex s '.' in
+              let base = String.sub s 0 dot in
+              List.map ((^) base) sufx @ accu
+            end
+            []
+        end
+        (find_modules lib.lib_modules "cmi")
+    in
+
     (* Compute what libraries should be built *)
     let acc_nopath =
       (* Add the packed header file if required *)
       let add_pack_header acc =
         if lib.lib_pack then
-          [cs.cs_name^".cmi"] :: acc
+          [cs.cs_name^".cmi"; cs.cs_name^".cmti"; cs.cs_name^".cmt"] :: acc
         else
           acc
       in
@@ -1559,7 +2185,7 @@ module OASISLibrary = struct
         add_pack_header ([cs.cs_name^".cma"] :: acc)
       in
       let native acc =
-        let acc = 
+        let acc =
           add_pack_header
             (if has_native_dynlink then
                [cs.cs_name^".cmxs"] :: acc
@@ -1598,11 +2224,113 @@ module OASISLibrary = struct
            acc_nopath)
         (headers @ cmxs)
 
-  type data = common_section * build_section * library
+
+end
+
+module OASISObject = struct
+(* # 22 "src/oasis/OASISObject.ml" *)
+
+
+  open OASISTypes
+  open OASISGettext
+
+
+  let source_unix_files ~ctxt (cs, bs, obj) source_file_exists =
+    List.fold_left
+      (fun acc modul ->
+         match OASISLibrary.find_module source_file_exists bs modul with
+           | `Sources (base_fn, lst) ->
+               (base_fn, lst) :: acc
+           | `No_sources _ ->
+               OASISMessage.warning
+                 ~ctxt
+                 (f_ "Cannot find source file matching \
+                      module '%s' in object %s")
+                 modul cs.cs_name;
+               acc)
+      []
+      obj.obj_modules
+
+
+  let generated_unix_files
+        ~ctxt
+        ~is_native
+        ~source_file_exists
+        (cs, bs, obj) =
+
+    let find_module ext modul =
+      match OASISLibrary.find_module source_file_exists bs modul with
+        | `Sources (base_fn, _) -> [base_fn ^ ext]
+        | `No_sources lst ->
+          OASISMessage.warning
+            ~ctxt
+            (f_ "Cannot find source file matching \
+                 module '%s' in object %s")
+            modul cs.cs_name ;
+          lst
+    in
+
+    let header, byte, native, c_object, f =
+      match obj.obj_modules with
+        | [ m ] -> (find_module ".cmi" m,
+                    find_module ".cmo" m,
+                    find_module ".cmx" m,
+                    find_module ".o" m,
+                    fun x -> x)
+        | _ -> ([cs.cs_name ^ ".cmi"],
+                [cs.cs_name ^ ".cmo"],
+                [cs.cs_name ^ ".cmx"],
+                [cs.cs_name ^ ".o"],
+                OASISUnixPath.concat bs.bs_path)
+    in
+      List.map (List.map f) (
+        match bs.bs_compiled_object with
+          | Native ->
+              native :: c_object :: byte :: header :: []
+          | Best when is_native ->
+              native :: c_object :: byte :: header :: []
+          | Byte | Best ->
+              byte :: header :: [])
+
+
+end
+
+module OASISFindlib = struct
+(* # 22 "src/oasis/OASISFindlib.ml" *)
+
+
+  open OASISTypes
+  open OASISUtils
+  open OASISGettext
+  open OASISSection
+
+
+  type library_name = name
+  type findlib_part_name = name
+  type 'a map_of_findlib_part_name = 'a OASISUtils.MapString.t
+
+
+  exception InternalLibraryNotFound of library_name
+  exception FindlibPackageNotFound of findlib_name
+
+
+  type group_t =
+    | Container of findlib_name * group_t list
+    | Package of (findlib_name *
+                  common_section *
+                  build_section *
+                  [`Library of library | `Object of object_] *
+                  group_t list)
+
+
+  type data = common_section *
+              build_section *
+              [`Library of library | `Object of object_]
   type tree =
     | Node of (data option) * (tree MapString.t)
     | Leaf of data
 
+
   let findlib_mapping pkg =
     (* Map from library name to either full findlib name or parts + parent. *)
     let fndlb_parts_of_lib_name =
@@ -1641,6 +2369,23 @@ module OASISLibrary = struct
                                mp
                    end
 
+               | Object (cs, _, obj) ->
+                   begin
+                     let obj_name = cs.cs_name in
+                     if MapString.mem obj_name mp then
+                       failwithf
+                         (f_ "The object name '%s' is used more than once.")
+                         obj_name;
+                     let findlib_full_name = match obj.obj_findlib_fullname with
+                       | Some ns -> String.concat "." ns
+                       | None -> obj_name
+                     in
+                     MapString.add
+                       obj_name
+                       (`Solved findlib_full_name)
+                       mp
+                   end
+
                | Executable _ | Test _ | Flag _ | SrcRepo _ | Doc _ ->
                    mp)
           MapString.empty
@@ -1708,7 +2453,7 @@ module OASISLibrary = struct
         let lib_name = cs.cs_name in
           findlib_name_of_library_name lib_name
       in
-      let rec add_children nm_lst (children : tree MapString.t) =
+      let rec add_children nm_lst (children: tree MapString.t) =
         match nm_lst with
           | (hd :: tl) ->
               begin
@@ -1778,7 +2523,9 @@ module OASISLibrary = struct
         (fun mp ->
            function
              | Library (cs, bs, lib) ->
-                 add (cs, bs, lib) mp
+                 add (cs, bs, `Library lib) mp
+             | Object (cs, bs, obj) ->
+                 add (cs, bs, `Object obj) mp
              | _ ->
                  mp)
         MapString.empty
@@ -1790,13 +2537,13 @@ module OASISLibrary = struct
     in
 
     let library_name_of_findlib_name =
-      Lazy.lazy_from_fun
-        (fun () ->
-           (* Revert findlib_name_of_library_name. *)
-           MapString.fold
-             (fun k v mp -> MapString.add v k mp)
-             fndlb_name_of_lib_name
-             MapString.empty)
+      lazy begin
+        (* Revert findlib_name_of_library_name. *)
+        MapString.fold
+          (fun k v mp -> MapString.add v k mp)
+          fndlb_name_of_lib_name
+          MapString.empty
+      end
     in
     let library_name_of_findlib_name fndlb_nm =
       try
@@ -1809,11 +2556,13 @@ module OASISLibrary = struct
       findlib_name_of_library_name,
       library_name_of_findlib_name
 
+
   let findlib_of_group =
     function
       | Container (fndlb_nm, _)
       | Package (fndlb_nm, _, _, _, _) -> fndlb_nm
 
+
   let root_of_group grp =
     let rec root_lib_aux =
       (* We do a DFS in the group. *)
@@ -1838,40 +2587,48 @@ module OASISLibrary = struct
               (f_ "Unable to determine root library of findlib library '%s'")
               (findlib_of_group grp)
 
+
 end
 
 module OASISFlag = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISFlag.ml" *)
+(* # 22 "src/oasis/OASISFlag.ml" *)
+
 
 end
 
 module OASISPackage = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISPackage.ml" *)
+(* # 22 "src/oasis/OASISPackage.ml" *)
+
 
 end
 
 module OASISSourceRepository = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISSourceRepository.ml" *)
+(* # 22 "src/oasis/OASISSourceRepository.ml" *)
+
 
 end
 
 module OASISTest = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISTest.ml" *)
+(* # 22 "src/oasis/OASISTest.ml" *)
+
 
 end
 
 module OASISDocument = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISDocument.ml" *)
+(* # 22 "src/oasis/OASISDocument.ml" *)
+
 
 end
 
 module OASISExec = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISExec.ml" *)
+(* # 22 "src/oasis/OASISExec.ml" *)
+
 
   open OASISGettext
   open OASISUtils
   open OASISMessage
 
+
   (* TODO: I don't like this quote, it is there because $(rm) foo expands to
    * 'rm -f' foo...
    *)
@@ -1902,6 +2659,7 @@ module OASISExec = struct
         | Some f, i ->
             f i
 
+
   let run_read_output ~ctxt ?f_exit_code cmd args =
     let fn =
       Filename.temp_file "oasis-" ".txt"
@@ -1933,6 +2691,7 @@ module OASISExec = struct
         (try Sys.remove fn with _ -> ());
         raise e
 
+
   let run_read_one_line ~ctxt ?f_exit_code cmd args =
     match run_read_output ~ctxt ?f_exit_code cmd args with
       | [fst] ->
@@ -1944,10 +2703,12 @@ module OASISExec = struct
 end
 
 module OASISFileUtil = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/oasis/OASISFileUtil.ml" *)
+(* # 22 "src/oasis/OASISFileUtil.ml" *)
+
 
   open OASISGettext
 
+
   let file_exists_case fn =
     let dirname = Filename.dirname fn in
     let basename = Filename.basename fn in
@@ -1961,6 +2722,7 @@ module OASISFileUtil = struct
       else
         false
 
+
   let find_file ?(case_sensitive=true) paths exts =
 
     (* Cardinal product of two list *)
@@ -1969,7 +2731,7 @@ module OASISFileUtil = struct
         (List.map
            (fun a ->
               List.map
-                (fun b -> a,b)
+                (fun b -> a, b)
                 lst2)
            lst1)
     in
@@ -1979,7 +2741,7 @@ module OASISFileUtil = struct
         | p1 :: p2 :: tl ->
             let acc =
               (List.map
-                 (fun (a,b) -> Filename.concat a b)
+                 (fun (a, b) -> Filename.concat a b)
                  (p1 * p2))
             in
               combined_paths (acc :: tl)
@@ -1991,19 +2753,21 @@ module OASISFileUtil = struct
 
     let alternatives =
       List.map
-        (fun (p,e) ->
+        (fun (p, e) ->
            if String.length e > 0 && e.[0] <> '.' then
              p ^ "." ^ e
            else
              p ^ e)
         ((combined_paths paths) * exts)
     in
-      List.find
+      List.find (fun file ->
         (if case_sensitive then
-           file_exists_case
+           file_exists_case file
          else
-           Sys.file_exists)
-        alternatives
+           Sys.file_exists file)
+        && not (Sys.is_directory file)
+      ) alternatives
+
 
   let which ~ctxt prg =
     let path_sep =
@@ -2023,6 +2787,7 @@ module OASISFileUtil = struct
     in
       find_file ~case_sensitive:false [path_lst; [prg]] exec_ext
 
+
   (**/**)
   let rec fix_dir dn =
     (* Windows hack because Sys.file_exists "src\\" = false when
@@ -2036,9 +2801,11 @@ module OASISFileUtil = struct
       else
         dn
 
+
   let q = Filename.quote
   (**/**)
 
+
   let cp ~ctxt ?(recurse=false) src tgt =
     if recurse then
       match Sys.os_type with
@@ -2055,6 +2822,7 @@ module OASISFileUtil = struct
          | _ -> "cp")
         [q src; q tgt]
 
+
   let mkdir ~ctxt tgt =
     OASISExec.run ~ctxt
       (match Sys.os_type with
@@ -2062,6 +2830,7 @@ module OASISFileUtil = struct
          | _ -> "mkdir")
       [q tgt]
 
+
   let rec mkdir_parent ~ctxt f tgt =
     let tgt =
       fix_dir tgt
@@ -2084,15 +2853,20 @@ module OASISFileUtil = struct
             end
         end
 
+
   let rmdir ~ctxt tgt =
-    if Sys.readdir tgt = [||] then
-      begin
-        match Sys.os_type with
-          | "Win32" ->
-              OASISExec.run ~ctxt "rd" [q tgt]
-          | _ ->
-              OASISExec.run ~ctxt "rm" ["-r"; q tgt]
-      end
+    if Sys.readdir tgt = [||] then begin
+      match Sys.os_type with
+        | "Win32" ->
+            OASISExec.run ~ctxt "rd" [q tgt]
+        | _ ->
+            OASISExec.run ~ctxt "rm" ["-r"; q tgt]
+    end else begin
+      OASISMessage.error ~ctxt
+        (f_ "Cannot remove directory '%s': not empty.")
+        tgt
+    end
+
 
   let glob ~ctxt fn =
    let basename =
@@ -2139,19 +2913,23 @@ module OASISFileUtil = struct
 end
 
 
-# 2142 "setup.ml"
+# 2916 "setup.ml"
 module BaseEnvLight = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseEnvLight.ml" *)
+(* # 22 "src/base/BaseEnvLight.ml" *)
+
 
   module MapString = Map.Make(String)
 
+
   type t = string MapString.t
 
+
   let default_filename =
     Filename.concat
       (Sys.getcwd ())
       "setup.data"
 
+
   let load ?(allow_empty=false) ?(filename=default_filename) () =
     if Sys.file_exists filename then
       begin
@@ -2209,26 +2987,29 @@ module BaseEnvLight = struct
              filename)
       end
 
-  let var_get name env =
-    let rec var_expand str =
-      let buff =
-        Buffer.create ((String.length str) * 2)
-      in
-        Buffer.add_substitute
-          buff
-          (fun var ->
-             try
-               var_expand (MapString.find var env)
-             with Not_found ->
-               failwith
-                 (Printf.sprintf
-                    "No variable %s defined when trying to expand %S."
-                    var
-                    str))
-          str;
-        Buffer.contents buff
+
+  let rec var_expand str env =
+    let buff =
+      Buffer.create ((String.length str) * 2)
     in
-      var_expand (MapString.find name env)
+      Buffer.add_substitute
+        buff
+        (fun var ->
+           try
+             var_expand (MapString.find var env) env
+           with Not_found ->
+             failwith
+               (Printf.sprintf
+                  "No variable %s defined when trying to expand %S."
+                  var
+                  str))
+        str;
+      Buffer.contents buff
+
+
+  let var_get name env =
+    var_expand (MapString.find name env) env
+
 
   let var_choose lst env =
     OASISExpr.choose
@@ -2237,20 +3018,24 @@ module BaseEnvLight = struct
 end
 
 
-# 2240 "setup.ml"
+# 3021 "setup.ml"
 module BaseContext = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseContext.ml" *)
+(* # 22 "src/base/BaseContext.ml" *)
 
+  (* TODO: get rid of this module. *)
   open OASISContext
 
-  let args = args
+
+  let args () = fst (fspecs ())
+
 
   let default = default
 
 end
 
 module BaseMessage = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseMessage.ml" *)
+(* # 22 "src/base/BaseMessage.ml" *)
+
 
   (** Message to user, overrid for Base
       @author Sylvain Le Gall
@@ -2258,31 +3043,38 @@ module BaseMessage = struct
   open OASISMessage
   open BaseContext
 
+
   let debug fmt   = debug ~ctxt:!default fmt
 
+
   let info fmt    = info ~ctxt:!default fmt
 
+
   let warning fmt = warning ~ctxt:!default fmt
 
+
   let error fmt = error ~ctxt:!default fmt
 
 end
 
 module BaseEnv = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseEnv.ml" *)
+(* # 22 "src/base/BaseEnv.ml" *)
 
   open OASISGettext
   open OASISUtils
   open PropList
 
+
   module MapString = BaseEnvLight.MapString
 
+
   type origin_t =
     | ODefault
     | OGetEnv
     | OFileLoad
     | OCommandLine
 
+
   type cli_handle_t =
     | CLINone
     | CLIAuto
@@ -2290,6 +3082,7 @@ module BaseEnv = struct
     | CLIEnable
     | CLIUser of (Arg.key * Arg.spec * Arg.doc) list
 
+
   type definition_t =
       {
         hide:       bool;
@@ -2299,21 +3092,26 @@ module BaseEnv = struct
         group:      string option;
       }
 
+
   let schema =
     Schema.create "environment"
 
+
   (* Environment data *)
   let env =
     Data.create ()
 
+
   (* Environment data from file *)
   let env_from_file =
     ref MapString.empty
 
+
   (* Lexer for var *)
   let var_lxr =
     Genlex.make_lexer []
 
+
   let rec var_expand str =
     let buff =
       Buffer.create ((String.length str) * 2)
@@ -2364,6 +3162,7 @@ module BaseEnv = struct
         str;
       Buffer.contents buff
 
+
   and var_get name =
     let vl =
       try
@@ -2378,6 +3177,7 @@ module BaseEnv = struct
     in
       var_expand vl
 
+
   let var_choose ?printer ?name lst =
     OASISExpr.choose
       ?printer
@@ -2385,6 +3185,7 @@ module BaseEnv = struct
       var_get
       lst
 
+
   let var_protect vl =
     let buff =
       Buffer.create (String.length vl)
@@ -2396,6 +3197,7 @@ module BaseEnv = struct
         vl;
       Buffer.contents buff
 
+
   let var_define
         ?(hide=false)
         ?(dump=true)
@@ -2481,6 +3283,7 @@ module BaseEnv = struct
       fun () ->
         var_expand (var_get_low (var_get_lst env))
 
+
   let var_redefine
         ?hide
         ?dump
@@ -2509,8 +3312,9 @@ module BaseEnv = struct
           dflt
       end
 
-  let var_ignore (e : unit -> string) =
-    ()
+
+  let var_ignore (e: unit -> string) = ()
+
 
   let print_hidden =
     var_define
@@ -2521,6 +3325,7 @@ module BaseEnv = struct
       "print_hidden"
       (fun () -> "false")
 
+
   let var_all () =
     List.rev
       (Schema.fold
@@ -2532,24 +3337,28 @@ module BaseEnv = struct
          []
          schema)
 
+
   let default_filename =
     BaseEnvLight.default_filename
 
+
   let load ?allow_empty ?filename () =
     env_from_file := BaseEnvLight.load ?allow_empty ?filename ()
 
+
   let unload () =
     env_from_file := MapString.empty;
     Data.clear env
 
+
   let dump ?(filename=default_filename) () =
     let chn =
       open_out_bin filename
     in
-    let output nm value = 
+    let output nm value =
       Printf.fprintf chn "%s=%S\n" nm value
     in
-    let mp_todo = 
+    let mp_todo =
       (* Dump data from schema *)
       Schema.fold
         (fun mp_todo nm def _ ->
@@ -2576,6 +3385,7 @@ module BaseEnv = struct
       (* End of the dump *)
       close_out chn
 
+
   let print () =
     let printable_vars =
       Schema.fold
@@ -2614,11 +3424,12 @@ module BaseEnv = struct
 
     Printf.printf "\nConfiguration: \n";
     List.iter
-      (fun (name,value) ->
+      (fun (name, value) ->
         Printf.printf "%s: %s %s\n" name (dot_pad name) value)
       (List.rev printable_vars);
     Printf.printf "\n%!"
 
+
   let args () =
     let arg_concat =
       OASISUtils.varname_concat ~hyphen:'-'
@@ -2729,11 +3540,13 @@ module BaseEnv = struct
 end
 
 module BaseArgExt = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseArgExt.ml" *)
+(* # 22 "src/base/BaseArgExt.ml" *)
+
 
   open OASISUtils
   open OASISGettext
 
+
   let parse argv args =
       (* Simulate command line for Arg *)
       let current =
@@ -2757,13 +3570,15 @@ module BaseArgExt = struct
 end
 
 module BaseCheck = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseCheck.ml" *)
+(* # 22 "src/base/BaseCheck.ml" *)
+
 
   open BaseEnv
   open BaseMessage
   open OASISUtils
   open OASISGettext
 
+
   let prog_best prg prg_lst =
     var_redefine
       prg
@@ -2786,15 +3601,19 @@ module BaseCheck = struct
              | Some prg -> prg
              | None -> raise Not_found)
 
+
   let prog prg =
     prog_best prg [prg]
 
+
   let prog_opt prg =
     prog_best prg [prg^".opt"; prg]
 
+
   let ocamlfind =
     prog "ocamlfind"
 
+
   let version
         var_prefix
         cmp
@@ -2836,11 +3655,13 @@ module BaseCheck = struct
                  version_str)
         ()
 
+
   let package_version pkg =
     OASISExec.run_read_one_line ~ctxt:!BaseContext.default
       (ocamlfind ())
       ["query"; "-format"; "%v"; pkg]
 
+
   let package ?version_comparator pkg () =
     let var =
       OASISUtils.varname_concat
@@ -2883,18 +3704,21 @@ module BaseCheck = struct
 end
 
 module BaseOCamlcConfig = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseOCamlcConfig.ml" *)
+(* # 22 "src/base/BaseOCamlcConfig.ml" *)
 
 
   open BaseEnv
   open OASISUtils
   open OASISGettext
 
+
   module SMap = Map.Make(String)
 
+
   let ocamlc =
     BaseCheck.prog_opt "ocamlc"
 
+
   let ocamlc_config_map =
     (* Map name to value for ocamlc -config output
        (name ^": "^value)
@@ -2940,7 +3764,7 @@ module BaseOCamlcConfig = struct
             mp
     in
 
-    let cache = 
+    let cache =
       lazy
         (var_protect
            (Marshal.to_string
@@ -2959,6 +3783,7 @@ module BaseOCamlcConfig = struct
            (* TODO: update if ocamlc change !!! *)
            Lazy.force cache)
 
+
   let var_define nm =
     (* Extract data from ocamlc -config *)
     let avlbl_config_get () =
@@ -2967,15 +3792,15 @@ module BaseOCamlcConfig = struct
         0
     in
     let chop_version_suffix s =
-      try 
+      try
         String.sub s 0 (String.index s '+')
-      with _ -> 
+      with _ ->
         s
      in
 
     let nm_config, value_config =
       match nm with
-        | "ocaml_version" -> 
+        | "ocaml_version" ->
             "version", chop_version_suffix
         | _ -> nm, (fun x -> x)
     in
@@ -2999,7 +3824,7 @@ module BaseOCamlcConfig = struct
 end
 
 module BaseStandardVar = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseStandardVar.ml" *)
+(* # 22 "src/base/BaseStandardVar.ml" *)
 
 
   open OASISGettext
@@ -3008,6 +3833,7 @@ module BaseStandardVar = struct
   open BaseCheck
   open BaseEnv
 
+
   let ocamlfind  = BaseCheck.ocamlfind
   let ocamlc     = BaseOCamlcConfig.ocamlc
   let ocamlopt   = prog_opt "ocamlopt"
@@ -3018,13 +3844,16 @@ module BaseStandardVar = struct
   let rpkg =
     ref None
 
+
   let pkg_get () =
     match !rpkg with
       | Some pkg -> pkg
       | None -> failwith (s_ "OASIS Package is not set")
 
+
   let var_cond = ref []
 
+
   let var_define_cond ~since_version f dflt =
     let holder = ref (fun () -> dflt) in
     let since_version =
@@ -3036,14 +3865,17 @@ module BaseStandardVar = struct
            holder := f ()) :: !var_cond;
       fun () -> !holder ()
 
+
   (**/**)
 
+
   let pkg_name =
     var_define
       ~short_desc:(fun () -> s_ "Package name")
       "pkg_name"
       (fun () -> (pkg_get ()).name)
 
+
   let pkg_version =
     var_define
       ~short_desc:(fun () -> s_ "Package version")
@@ -3051,16 +3883,20 @@ module BaseStandardVar = struct
       (fun () ->
          (OASISVersion.string_of_version (pkg_get ()).version))
 
+
   let c = BaseOCamlcConfig.var_define
 
+
   let os_type        = c "os_type"
   let system         = c "system"
   let architecture   = c "architecture"
   let ccomp_type     = c "ccomp_type"
   let ocaml_version  = c "ocaml_version"
 
+
   (* TODO: Check standard variable presence at runtime *)
 
+
   let standard_library_default = c "standard_library_default"
   let standard_library         = c "standard_library"
   let standard_runtime         = c "standard_runtime"
@@ -3074,24 +3910,27 @@ module BaseStandardVar = struct
   let default_executable_name  = c "default_executable_name"
   let systhread_supported      = c "systhread_supported"
 
-  let flexlink = 
+
+  let flexlink =
     BaseCheck.prog "flexlink"
 
+
   let flexdll_version =
     var_define
       ~short_desc:(fun () -> "FlexDLL version (Win32)")
       "flexdll_version"
       (fun () ->
-         let lst = 
+         let lst =
            OASISExec.run_read_output ~ctxt:!BaseContext.default
              (flexlink ()) ["-help"]
          in
-           match lst with 
+           match lst with
              | line :: _ ->
                  Scanf.sscanf line "FlexDLL version %s" (fun ver -> ver)
              | [] ->
                  raise Not_found)
 
+
   (**/**)
   let p name hlp dflt =
     var_define
@@ -3101,6 +3940,7 @@ module BaseStandardVar = struct
       name
       dflt
 
+
   let (/) a b =
     if os_type () = Sys.os_type then
       Filename.concat a b
@@ -3111,6 +3951,7 @@ module BaseStandardVar = struct
         (os_type ())
   (**/**)
 
+
   let prefix =
     p "prefix"
       (fun () -> s_ "Install architecture-independent files dir")
@@ -3124,96 +3965,115 @@ module BaseStandardVar = struct
            | _ ->
                "/usr/local")
 
+
   let exec_prefix =
     p "exec_prefix"
       (fun () -> s_ "Install architecture-dependent files in dir")
       (fun () -> "$prefix")
 
+
   let bindir =
     p "bindir"
       (fun () -> s_ "User executables")
       (fun () -> "$exec_prefix"/"bin")
 
+
   let sbindir =
     p "sbindir"
       (fun () -> s_ "System admin executables")
       (fun () -> "$exec_prefix"/"sbin")
 
+
   let libexecdir =
     p "libexecdir"
       (fun () -> s_ "Program executables")
       (fun () -> "$exec_prefix"/"libexec")
 
+
   let sysconfdir =
     p "sysconfdir"
       (fun () -> s_ "Read-only single-machine data")
       (fun () -> "$prefix"/"etc")
 
+
   let sharedstatedir =
     p "sharedstatedir"
       (fun () -> s_ "Modifiable architecture-independent data")
       (fun () -> "$prefix"/"com")
 
+
   let localstatedir =
     p "localstatedir"
       (fun () -> s_ "Modifiable single-machine data")
       (fun () -> "$prefix"/"var")
 
+
   let libdir =
     p "libdir"
       (fun () -> s_ "Object code libraries")
       (fun () -> "$exec_prefix"/"lib")
 
+
   let datarootdir =
     p "datarootdir"
       (fun () -> s_ "Read-only arch-independent data root")
       (fun () -> "$prefix"/"share")
 
+
   let datadir =
     p "datadir"
       (fun () -> s_ "Read-only architecture-independent data")
       (fun () -> "$datarootdir")
 
+
   let infodir =
     p "infodir"
       (fun () -> s_ "Info documentation")
       (fun () -> "$datarootdir"/"info")
 
+
   let localedir =
     p "localedir"
       (fun () -> s_ "Locale-dependent data")
       (fun () -> "$datarootdir"/"locale")
 
+
   let mandir =
     p "mandir"
       (fun () -> s_ "Man documentation")
       (fun () -> "$datarootdir"/"man")
 
+
   let docdir =
     p "docdir"
       (fun () -> s_ "Documentation root")
       (fun () -> "$datarootdir"/"doc"/"$pkg_name")
 
+
   let htmldir =
     p "htmldir"
       (fun () -> s_ "HTML documentation")
       (fun () -> "$docdir")
 
+
   let dvidir =
     p "dvidir"
       (fun () -> s_ "DVI documentation")
       (fun () -> "$docdir")
 
+
   let pdfdir =
     p "pdfdir"
       (fun () -> s_ "PDF documentation")
       (fun () -> "$docdir")
 
+
   let psdir =
     p "psdir"
       (fun () -> s_ "PS documentation")
       (fun () -> "$docdir")
 
+
   let destdir =
     p "destdir"
       (fun () -> s_ "Prepend a path when installing package")
@@ -3223,35 +4083,39 @@ module BaseStandardVar = struct
               ("destdir",
                Some (s_ "undefined by construct"))))
 
+
   let findlib_version =
     var_define
       "findlib_version"
       (fun () ->
          BaseCheck.package_version "findlib")
 
+
   let is_native =
     var_define
       "is_native"
       (fun () ->
          try
-           let _s : string =
+           let _s: string =
              ocamlopt ()
            in
              "true"
          with PropList.Not_set _ ->
-           let _s : string =
+           let _s: string =
              ocamlc ()
            in
              "false")
 
+
   let ext_program =
     var_define
       "suffix_program"
       (fun () ->
          match os_type () with
-           | "Win32" -> ".exe"
+           | "Win32" | "Cygwin" -> ".exe"
            | _ -> "")
 
+
   let rm =
     var_define
       ~short_desc:(fun () -> s_ "Remove a file.")
@@ -3261,6 +4125,7 @@ module BaseStandardVar = struct
            | "Win32" -> "del"
            | _ -> "rm -f")
 
+
   let rmdir =
     var_define
       ~short_desc:(fun () -> s_ "Remove a directory.")
@@ -3270,6 +4135,7 @@ module BaseStandardVar = struct
            | "Win32" -> "rd"
            | _ -> "rm -rf")
 
+
   let debug =
     var_define
       ~short_desc:(fun () -> s_ "Turn ocaml debug flag on")
@@ -3277,6 +4143,7 @@ module BaseStandardVar = struct
       "debug"
       (fun () -> "true")
 
+
   let profile =
     var_define
       ~short_desc:(fun () -> s_ "Turn ocaml profile flag on")
@@ -3284,6 +4151,7 @@ module BaseStandardVar = struct
       "profile"
       (fun () -> "false")
 
+
   let tests =
     var_define_cond ~since_version:"0.3"
       (fun () ->
@@ -3295,6 +4163,7 @@ module BaseStandardVar = struct
            (fun () -> "false"))
       "true"
 
+
   let docs =
     var_define_cond ~since_version:"0.3"
       (fun () ->
@@ -3305,6 +4174,7 @@ module BaseStandardVar = struct
            (fun () -> "true"))
       "true"
 
+
   let native_dynlink =
     var_define
       ~short_desc:(fun () -> s_ "Compiler support generation of .cmxs.")
@@ -3312,7 +4182,7 @@ module BaseStandardVar = struct
       "native_dynlink"
       (fun () ->
          let res =
-           let ocaml_lt_312 () = 
+           let ocaml_lt_312 () =
              OASISVersion.comparator_apply
                (OASISVersion.version_of_string (ocaml_version ()))
                (OASISVersion.VLesser
@@ -3324,7 +4194,7 @@ module BaseStandardVar = struct
                (OASISVersion.VLesser
                   (OASISVersion.version_of_string "0.30"))
            in
-           let has_native_dynlink = 
+           let has_native_dynlink =
              let ocamlfind = ocamlfind () in
                try
                  let fn =
@@ -3342,10 +4212,10 @@ module BaseStandardVar = struct
                false
              else if ocaml_lt_312 () then
                false
-             else if (os_type () = "Win32" || os_type () = "Cygwin") 
+             else if (os_type () = "Win32" || os_type () = "Cygwin")
                      && flexdll_lt_030 () then
                begin
-                 BaseMessage.warning 
+                 BaseMessage.warning
                    (f_ ".cmxs generation disabled because FlexDLL needs to be \
                         at least 0.30. Please upgrade FlexDLL from %s to 0.30.")
                    (flexdll_version ());
@@ -3356,6 +4226,7 @@ module BaseStandardVar = struct
          in
            string_of_bool res)
 
+
   let init pkg =
     rpkg := Some pkg;
     List.iter (fun f -> f pkg.oasis_version) !var_cond
@@ -3363,12 +4234,14 @@ module BaseStandardVar = struct
 end
 
 module BaseFileAB = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseFileAB.ml" *)
+(* # 22 "src/base/BaseFileAB.ml" *)
+
 
   open BaseEnv
   open OASISGettext
   open BaseMessage
 
+
   let to_filename fn =
     let fn =
       OASISHostPath.of_unix fn
@@ -3379,6 +4252,7 @@ module BaseFileAB = struct
           fn;
       Filename.chop_extension fn
 
+
   let replace fn_lst =
     let buff =
       Buffer.create 13
@@ -3411,15 +4285,18 @@ module BaseFileAB = struct
 end
 
 module BaseLog = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseLog.ml" *)
+(* # 22 "src/base/BaseLog.ml" *)
+
 
   open OASISUtils
 
+
   let default_filename =
     Filename.concat
       (Filename.dirname BaseEnv.default_filename)
       "setup.log"
 
+
   module SetTupleString =
     Set.Make
       (struct
@@ -3430,6 +4307,7 @@ module BaseLog = struct
              | n -> n
        end)
 
+
   let load () =
     if Sys.file_exists default_filename then
       begin
@@ -3479,6 +4357,7 @@ module BaseLog = struct
         []
       end
 
+
   let register event data =
     let chn_out =
       open_out_gen [Open_append; Open_creat; Open_text] 0o644 default_filename
@@ -3486,6 +4365,7 @@ module BaseLog = struct
       Printf.fprintf chn_out "%S %S\n" event data;
       close_out chn_out
 
+
   let unregister event data =
     if Sys.file_exists default_filename then
       begin
@@ -3511,6 +4391,7 @@ module BaseLog = struct
             Sys.remove default_filename
       end
 
+
   let filter events =
     let st_events =
       List.fold_left
@@ -3523,6 +4404,7 @@ module BaseLog = struct
         (fun (e, _) -> SetString.mem e st_events)
         (load ())
 
+
   let exists event data =
     List.exists
       (fun v -> (event, data) = v)
@@ -3530,31 +4412,38 @@ module BaseLog = struct
 end
 
 module BaseBuilt = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseBuilt.ml" *)
+(* # 22 "src/base/BaseBuilt.ml" *)
+
 
   open OASISTypes
   open OASISGettext
   open BaseStandardVar
   open BaseMessage
 
+
   type t =
     | BExec    (* Executable *)
     | BExecLib (* Library coming with executable *)
     | BLib     (* Library *)
+    | BObj     (* Library *)
     | BDoc     (* Document *)
 
+
   let to_log_event_file t nm =
     "built_"^
     (match t with
        | BExec -> "exec"
        | BExecLib -> "exec_lib"
        | BLib -> "lib"
+       | BObj -> "obj"
        | BDoc -> "doc")^
     "_"^nm
 
+
   let to_log_event_done t nm =
     "is_"^(to_log_event_file t nm)
 
+
   let register t nm lst =
     BaseLog.register
       (to_log_event_done t nm)
@@ -3585,6 +4474,7 @@ module BaseBuilt = struct
                (String.concat (s_ ", ") alt))
       lst
 
+
   let unregister t nm =
     List.iter
       (fun (e, d) ->
@@ -3593,6 +4483,7 @@ module BaseBuilt = struct
          [to_log_event_file t nm;
           to_log_event_done t nm])
 
+
   let fold t nm f acc =
     List.fold_left
       (fun acc (_, fn) ->
@@ -3612,6 +4503,8 @@ module BaseBuilt = struct
                          (f_ "executable %s")
                      | BLib ->
                          (f_ "library %s")
+                     | BObj ->
+                         (f_ "object %s")
                      | BDoc ->
                          (f_ "documentation %s"))
                   nm);
@@ -3621,6 +4514,7 @@ module BaseBuilt = struct
       (BaseLog.filter
          [to_log_event_file t nm])
 
+
   let is_built t nm =
     List.fold_left
       (fun is_built (_, d) ->
@@ -3632,6 +4526,7 @@ module BaseBuilt = struct
       (BaseLog.filter
          [to_log_event_done t nm])
 
+
   let of_executable ffn (cs, bs, exec) =
     let unix_exec_is, unix_dll_opt =
       OASISExecutable.unix_exec_is
@@ -3655,6 +4550,7 @@ module BaseBuilt = struct
       unix_exec_is,
       unix_dll_opt
 
+
   let of_library ffn (cs, bs, lib) =
     let unix_lst =
       OASISLibrary.generated_unix_files
@@ -3674,16 +4570,35 @@ module BaseBuilt = struct
     in
       evs, unix_lst
 
+
+  let of_object ffn (cs, bs, obj) =
+    let unix_lst =
+      OASISObject.generated_unix_files
+        ~ctxt:!BaseContext.default
+        ~source_file_exists:(fun fn ->
+           OASISFileUtil.file_exists_case (OASISHostPath.of_unix fn))
+        ~is_native:(bool_of_string (is_native ()))
+        (cs, bs, obj)
+    in
+    let evs =
+      [BObj,
+       cs.cs_name,
+       List.map (List.map ffn) unix_lst]
+    in
+      evs, unix_lst
+
 end
 
 module BaseCustom = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseCustom.ml" *)
+(* # 22 "src/base/BaseCustom.ml" *)
+
 
   open BaseEnv
   open BaseMessage
   open OASISTypes
   open OASISGettext
 
+
   let run cmd args extra_args =
     OASISExec.run ~ctxt:!BaseContext.default ~quote:false
       (var_expand cmd)
@@ -3691,6 +4606,7 @@ module BaseCustom = struct
          var_expand
          (args @ (Array.to_list extra_args)))
 
+
   let hook ?(failsafe=false) cstm f e =
     let optional_command lst =
       let printer =
@@ -3727,7 +4643,7 @@ module BaseCustom = struct
 end
 
 module BaseDynVar = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseDynVar.ml" *)
+(* # 22 "src/base/BaseDynVar.ml" *)
 
 
   open OASISTypes
@@ -3735,6 +4651,7 @@ module BaseDynVar = struct
   open BaseEnv
   open BaseBuilt
 
+
   let init pkg =
     (* TODO: disambiguate exec vs other variable by adding exec_VARNAME. *)
     (* TODO: provide compile option for library libary_byte_args_VARNAME... *)
@@ -3768,13 +4685,14 @@ module BaseDynVar = struct
                                              (f_ "Executable '%s' not yet built.")
                                              cs.cs_name)))))
 
-         | Library _ | Flag _ | Test _ | SrcRepo _ | Doc _ ->
+         | Library _ | Object _ | Flag _ | Test _ | SrcRepo _ | Doc _ ->
              ())
       pkg.sections
 end
 
 module BaseTest = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseTest.ml" *)
+(* # 22 "src/base/BaseTest.ml" *)
+
 
   open BaseEnv
   open BaseMessage
@@ -3782,6 +4700,7 @@ module BaseTest = struct
   open OASISExpr
   open OASISGettext
 
+
   let test lst pkg extra_args =
 
     let one_test (failure, n) (test_plugin, cs, test) =
@@ -3832,7 +4751,7 @@ module BaseTest = struct
           (failure, n)
         end
     in
-    let (failed, n) =
+    let failed, n =
       List.fold_left
         one_test
         (0.0, 0)
@@ -3855,7 +4774,7 @@ module BaseTest = struct
         info "%s" msg;
 
       (* Possible explanation why the tests where not run. *)
-      if OASISVersion.version_0_3_or_after pkg.oasis_version &&
+      if OASISFeatures.package_test OASISFeatures.flag_tests pkg &&
          not (bool_of_string (BaseStandardVar.tests ())) &&
          lst <> [] then
         BaseMessage.warning
@@ -3864,13 +4783,15 @@ module BaseTest = struct
 end
 
 module BaseDoc = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseDoc.ml" *)
+(* # 22 "src/base/BaseDoc.ml" *)
+
 
   open BaseEnv
   open BaseMessage
   open OASISTypes
   open OASISGettext
 
+
   let doc lst pkg extra_args =
 
     let one_doc (doc_plugin, cs, doc) =
@@ -3890,7 +4811,7 @@ module BaseDoc = struct
     in
       List.iter one_doc lst;
 
-      if OASISVersion.version_0_3_or_after pkg.oasis_version &&
+      if OASISFeatures.package_test OASISFeatures.flag_docs pkg &&
          not (bool_of_string (BaseStandardVar.docs ())) &&
          lst <> [] then
         BaseMessage.warning
@@ -3899,7 +4820,7 @@ module BaseDoc = struct
 end
 
 module BaseSetup = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/base/BaseSetup.ml" *)
+(* # 22 "src/base/BaseSetup.ml" *)
 
   open BaseEnv
   open BaseMessage
@@ -3908,12 +4829,15 @@ module BaseSetup = struct
   open OASISGettext
   open OASISUtils
 
+
   type std_args_fun =
       package -> string array -> unit
 
+
   type ('a, 'b) section_args_fun =
       name * (package -> (common_section * 'a) -> string array -> 'b)
 
+
   type t =
       {
         configure:        std_args_fun;
@@ -3937,6 +4861,7 @@ module BaseSetup = struct
         setup_update:     bool;
       }
 
+
   (* Associate a plugin function with data from package *)
   let join_plugin_sections filter_map lst =
     List.rev
@@ -3950,6 +4875,7 @@ module BaseSetup = struct
          []
          lst)
 
+
   (* Search for plugin data associated with a section name *)
   let lookup_plugin_section plugin action nm lst =
     try
@@ -3961,11 +4887,12 @@ module BaseSetup = struct
         nm
         action
 
+
   let configure t args =
     (* Run configure *)
     BaseCustom.hook
       t.package.conf_custom
-      (fun () -> 
+      (fun () ->
          (* Reload if preconf has changed it *)
          begin
            try
@@ -3992,12 +4919,14 @@ module BaseSetup = struct
     (* Replace data in file *)
     BaseFileAB.replace t.package.files_ab
 
+
   let build t args =
     BaseCustom.hook
       t.package.build_custom
       (t.build t.package)
       args
 
+
   let doc t args =
     BaseDoc.doc
       (join_plugin_sections
@@ -4017,6 +4946,7 @@ module BaseSetup = struct
       t.package
       args
 
+
   let test t args =
     BaseTest.test
       (join_plugin_sections
@@ -4036,6 +4966,7 @@ module BaseSetup = struct
       t.package
       args
 
+
   let all t args =
     let rno_doc =
       ref false
@@ -4043,6 +4974,9 @@ module BaseSetup = struct
     let rno_test =
       ref false
     in
+    let arg_rest =
+      ref []
+    in
       Arg.parse_argv
         ~current:(ref 0)
         (Array.of_list
@@ -4056,12 +4990,16 @@ module BaseSetup = struct
           "-no-test",
           Arg.Set rno_test,
           s_ "Don't run test target";
+
+          "--",
+          Arg.Rest (fun arg -> arg_rest := arg :: !arg_rest),
+          s_ "All arguments for configure.";
         ]
         (failwithf (f_ "Don't know what to do with '%s'"))
         "";
 
       info "Running configure step";
-      configure t [||];
+      configure t (Array.of_list (List.rev !arg_rest));
 
       info "Running build step";
       build     t [||];
@@ -4089,22 +5027,26 @@ module BaseSetup = struct
           info "Skipping test step"
         end
 
+
   let install t args =
     BaseCustom.hook
       t.package.install_custom
       (t.install t.package)
       args
 
+
   let uninstall t args =
     BaseCustom.hook
       t.package.uninstall_custom
       (t.uninstall t.package)
       args
 
+
   let reinstall t args =
     uninstall t args;
     install t args
 
+
   let clean, distclean =
     let failsafe f a =
       try
@@ -4146,6 +5088,7 @@ module BaseSetup = struct
                         (f t.package (cs, doc))
                         args
                 | Library _
+                | Object _
                 | Executable _
                 | Flag _
                 | SrcRepo _ ->
@@ -4201,9 +5144,11 @@ module BaseSetup = struct
 
       clean, distclean
 
+
   let version t _ =
     print_endline t.oasis_version
 
+
   let update_setup_ml, no_update_setup_ml_cli =
     let b = ref true in
       b,
@@ -4211,11 +5156,15 @@ module BaseSetup = struct
        Arg.Clear b,
        s_ " Don't try to update setup.ml, even if _oasis has changed.")
 
+
+  let default_oasis_fn = "_oasis"
+
+
   let update_setup_ml t =
     let oasis_fn =
       match t.oasis_fn with
         | Some fn -> fn
-        | None -> "_oasis"
+        | None -> default_oasis_fn
     in
     let oasis_exec =
       match t.oasis_exec with
@@ -4313,7 +5262,8 @@ module BaseSetup = struct
         try
           match t.oasis_digest with
             | Some dgst ->
-              if Sys.file_exists oasis_fn && dgst <> Digest.file "_oasis" then
+              if Sys.file_exists oasis_fn &&
+                 dgst <> Digest.file default_oasis_fn then
                 begin
                   do_update ();
                   true
@@ -4333,6 +5283,7 @@ module BaseSetup = struct
     else
       false
 
+
   let setup t =
     let catch_exn =
       ref true
@@ -4474,41 +5425,34 @@ module BaseSetup = struct
         error "%s" (Printexc.to_string e);
         exit 1
 
+
 end
 
 
-# 4480 "setup.ml"
+# 5432 "setup.ml"
 module InternalConfigurePlugin = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/plugins/internal/InternalConfigurePlugin.ml" *)
+(* # 22 "src/plugins/internal/InternalConfigurePlugin.ml" *)
+
 
   (** Configure using internal scheme
       @author Sylvain Le Gall
     *)
 
+
   open BaseEnv
   open OASISTypes
   open OASISUtils
   open OASISGettext
   open BaseMessage
 
+
   (** Configure build using provided series of check to be done
     * and then output corresponding file.
     *)
   let configure pkg argv =
-    let var_ignore_eval var =
-      let _s : string =
-        var ()
-      in
-        ()
-    in
-
-    let errors =
-      ref SetString.empty
-    in
-
-    let buff =
-      Buffer.create 13
-    in
+    let var_ignore_eval var = let _s: string = var () in () in
+    let errors = ref SetString.empty in
+    let buff = Buffer.create 13 in
 
     let add_errors fmt =
       Printf.kbprintf
@@ -4656,6 +5600,20 @@ module InternalConfigurePlugin = struct
         | None ->
             ()
     end;
+    (* Make sure the findlib version is fine for the OCaml compiler. *)
+    begin
+      let ocaml_ge4 =
+        OASISVersion.version_compare
+          (OASISVersion.version_of_string (BaseStandardVar.ocaml_version()))
+          (OASISVersion.version_of_string "4.0.0") >= 0 in
+      if ocaml_ge4 then
+        let findlib_lt132 =
+          OASISVersion.version_compare
+            (OASISVersion.version_of_string (BaseStandardVar.findlib_version()))
+            (OASISVersion.version_of_string "1.3.2") < 0 in
+        if findlib_lt132 then
+          add_errors "OCaml >= 4.0.0 requires Findlib version >= 1.3.2"
+    end;
 
     (* FlexDLL *)
     if BaseStandardVar.os_type () = "Win32" ||
@@ -4718,43 +5676,58 @@ module InternalConfigurePlugin = struct
           (SetString.cardinal !errors)
       end
 
+
 end
 
 module InternalInstallPlugin = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/plugins/internal/InternalInstallPlugin.ml" *)
+(* # 22 "src/plugins/internal/InternalInstallPlugin.ml" *)
+
 
   (** Install using internal scheme
       @author Sylvain Le Gall
     *)
 
+
   open BaseEnv
   open BaseStandardVar
   open BaseMessage
   open OASISTypes
-  open OASISLibrary
+  open OASISFindlib
   open OASISGettext
   open OASISUtils
 
+
   let exec_hook =
     ref (fun (cs, bs, exec) -> cs, bs, exec)
 
+
   let lib_hook =
     ref (fun (cs, bs, lib) -> cs, bs, lib, [])
 
+
+  let obj_hook =
+    ref (fun (cs, bs, obj) -> cs, bs, obj, [])
+
+
   let doc_hook =
     ref (fun (cs, doc) -> cs, doc)
 
+
   let install_file_ev =
     "install-file"
 
+
   let install_dir_ev =
     "install-dir"
 
+
   let install_findlib_ev =
     "install-findlib"
 
+
   let win32_max_command_line_length = 8000
 
+
   let split_install_command ocamlfind findlib_name meta files =
     if Sys.os_type = "Win32" then
       (* Arguments for the first command: *)
@@ -4794,20 +5767,21 @@ module InternalInstallPlugin = struct
                 | (firsts, others) ->
                     let cmd = args @ firsts in
                     (* Use -add for remaining commands: *)
-                    let () = 
+                    let () =
                       let findlib_ge_132 =
                         OASISVersion.comparator_apply
-                          (OASISVersion.version_of_string 
+                          (OASISVersion.version_of_string
                              (BaseStandardVar.findlib_version ()))
-                          (OASISVersion.VGreaterEqual 
+                          (OASISVersion.VGreaterEqual
                              (OASISVersion.version_of_string "1.3.2"))
                       in
                         if not findlib_ge_132 then
                           failwithf
-                            (f_ "Installing the library %s require to use the flag \
-                                 '-add' of ocamlfind because the command line is too \
-                                  long. This flag is only available for findlib 1.3.2. \
-                                  Please upgrade findlib from %s to 1.3.2")
+                            (f_ "Installing the library %s require to use the \
+                                 flag '-add' of ocamlfind because the command \
+                                 line is too long. This flag is only available \
+                                 for findlib 1.3.2. Please upgrade findlib from \
+                                 %s to 1.3.2")
                             findlib_name (BaseStandardVar.findlib_version ())
                     in
                     let cmds = split other_args others in
@@ -4818,6 +5792,7 @@ module InternalInstallPlugin = struct
     else
       ["install" :: findlib_name :: meta :: files]
 
+
   let install pkg argv =
 
     let in_destdir =
@@ -4890,6 +5865,17 @@ module InternalInstallPlugin = struct
           lst
     in
 
+    let make_fnames modul sufx =
+      List.fold_right
+        begin fun sufx accu ->
+          (OASISString.capitalize_ascii modul ^ sufx) ::
+          (OASISString.uncapitalize_ascii modul ^ sufx) ::
+          accu
+        end
+        sufx
+        []
+    in
+
     (** Install all libraries *)
     let install_libs pkg =
 
@@ -4910,27 +5896,29 @@ module InternalInstallPlugin = struct
                   OASISHostPath.of_unix bs.bs_path
                 in
                   List.fold_left
-                    (fun acc modul ->
-                       try
-                         List.find
-                           OASISFileUtil.file_exists_case
-                           (List.map
-                              (Filename.concat path)
-                              [modul^".mli";
-                               modul^".ml";
-                               String.uncapitalize modul^".mli";
-                               String.capitalize   modul^".mli";
-                               String.uncapitalize modul^".ml";
-                               String.capitalize   modul^".ml"])
-                         :: acc
-                       with Not_found ->
-                         begin
-                           warning
-                             (f_ "Cannot find source header for module %s \
-                                  in library %s")
-                             modul cs.cs_name;
-                           acc
-                         end)
+                    begin fun acc modul ->
+                      begin
+                        try
+                          [List.find
+                            OASISFileUtil.file_exists_case
+                            (List.map
+                               (Filename.concat path)
+                               (make_fnames modul [".mli"; ".ml"]))]
+                        with Not_found ->
+                          warning
+                            (f_ "Cannot find source header for module %s \
+                                 in library %s")
+                            modul cs.cs_name;
+                          []
+                      end
+                      @
+                      List.filter
+                        OASISFileUtil.file_exists_case
+                        (List.map
+                           (Filename.concat path)
+                           (make_fnames modul [".annot";".cmti";".cmt"]))
+                      @ acc
+                    end
                     acc
                     lib.lib_modules
               in
@@ -4961,6 +5949,77 @@ module InternalInstallPlugin = struct
             begin
               (f_data, acc)
             end
+      and files_of_object (f_data, acc) data_obj =
+        let cs, bs, obj, obj_extra =
+          !obj_hook data_obj
+        in
+          if var_choose bs.bs_install &&
+             BaseBuilt.is_built BaseBuilt.BObj cs.cs_name then
+            begin
+              let acc =
+                (* Start with acc + obj_extra *)
+                List.rev_append obj_extra acc
+              in
+              let acc =
+                (* Add uncompiled header from the source tree *)
+                let path =
+                  OASISHostPath.of_unix bs.bs_path
+                in
+                  List.fold_left
+                    begin fun acc modul ->
+                      begin
+                        try
+                          [List.find
+                             OASISFileUtil.file_exists_case
+                             (List.map
+                                (Filename.concat path)
+                                (make_fnames modul [".mli"; ".ml"]))]
+                        with Not_found ->
+                          warning
+                            (f_ "Cannot find source header for module %s \
+                                 in object %s")
+                            modul cs.cs_name;
+                          []
+                      end
+                      @
+                      List.filter
+                        OASISFileUtil.file_exists_case
+                        (List.map
+                           (Filename.concat path)
+                           (make_fnames modul [".annot";".cmti";".cmt"]))
+                      @ acc
+                    end
+                    acc
+                    obj.obj_modules
+              in
+
+              let acc =
+               (* Get generated files *)
+               BaseBuilt.fold
+                 BaseBuilt.BObj
+                 cs.cs_name
+                 (fun acc fn -> fn :: acc)
+                 acc
+              in
+
+              let f_data () =
+                (* Install data associated with the object *)
+                install_data
+                  bs.bs_path
+                  bs.bs_data_files
+                  (Filename.concat
+                     (datarootdir ())
+                     pkg.name);
+                f_data ()
+              in
+
+                (f_data, acc)
+            end
+           else
+            begin
+              (f_data, acc)
+            end
+
       in
 
       (* Install one group of library *)
@@ -4971,8 +6030,10 @@ module InternalInstallPlugin = struct
             match grp with
               | Container (_, children) ->
                   data_and_files, children
-              | Package (_, cs, bs, lib, children) ->
+              | Package (_, cs, bs, `Library lib, children) ->
                   files_of_library data_and_files (cs, bs, lib), children
+              | Package (_, cs, bs, `Object obj, children) ->
+                  files_of_object data_and_files (cs, bs, obj), children
           in
             List.fold_left
               install_group_lib_aux
@@ -5006,7 +6067,7 @@ module InternalInstallPlugin = struct
             begin
               let meta =
                 (* Search META file *)
-                let (_, bs, _) =
+                let _, bs, _ =
                   root_lib
                 in
                 let res =
@@ -5019,7 +6080,7 @@ module InternalInstallPlugin = struct
                       findlib_name;
                   res
               in
-              let files = 
+              let files =
                 (* Make filename shorter to avoid hitting command max line length
                  * too early, esp. on Windows.
                  *)
@@ -5028,24 +6089,24 @@ module InternalInstallPlugin = struct
                   let nlen = String.length n in
                     if plen <= nlen && String.sub n 0 plen = p then
                       begin
-                        let fn_sep = 
+                        let fn_sep =
                           if Sys.os_type = "Win32" then
                             '\\'
                           else
                             '/'
                         in
                         let cutpoint = plen +
-                          (if plen < nlen && n.[plen] = fn_sep then 
+                          (if plen < nlen && n.[plen] = fn_sep then
                              1
-                           else 
+                           else
                              0)
                         in
                           String.sub n cutpoint (nlen - cutpoint)
                       end
-                    else 
+                    else
                       n
                 in
-                  List.map (remove_prefix (Sys.getcwd ())) files 
+                  List.map (remove_prefix (Sys.getcwd ())) files
               in
                 info
                   (f_ "Installing findlib library '%s'")
@@ -5079,7 +6140,7 @@ module InternalInstallPlugin = struct
 
     let install_execs pkg =
       let install_exec data_exec =
-        let (cs, bs, exec) =
+        let cs, bs, exec =
           !exec_hook data_exec
         in
           if var_choose bs.bs_install &&
@@ -5126,7 +6187,7 @@ module InternalInstallPlugin = struct
 
     let install_docs pkg =
       let install_doc data =
-        let (cs, doc) =
+        let cs, doc =
           !doc_hook data
         in
           if var_choose doc.doc_install &&
@@ -5162,6 +6223,7 @@ module InternalInstallPlugin = struct
       install_execs pkg;
       install_docs  pkg
 
+
   (* Uninstall already installed data *)
   let uninstall _ argv =
     List.iter
@@ -5225,41 +6287,49 @@ module InternalInstallPlugin = struct
          (BaseLog.filter
             [install_file_ev;
              install_dir_ev;
-             install_findlib_ev;]))
+             install_findlib_ev]))
+
 
 end
 
 
-# 5233 "setup.ml"
+# 6296 "setup.ml"
 module CustomPlugin = struct
-(* # 21 "/somewhere/.share/projects/externals/oasis/_build/src/plugins/custom/CustomPlugin.ml" *)
+(* # 22 "src/plugins/custom/CustomPlugin.ml" *)
+
 
   (** Generate custom configure/build/doc/test/install system
       @author
     *)
 
+
   open BaseEnv
   open OASISGettext
   open OASISTypes
 
 
 
+
+
   type t =
       {
         cmd_main:      command_line conditional;
         cmd_clean:     (command_line option) conditional;
         cmd_distclean: (command_line option) conditional;
-      } 
+      }
+
+
+  let run  = BaseCustom.run
 
-  let run  = BaseCustom.run 
 
   let main t _ extra_args =
     let cmd, args =
-      var_choose 
-        ~name:(s_ "main command") 
+      var_choose
+        ~name:(s_ "main command")
         t.cmd_main
     in
-      run cmd args extra_args 
+      run cmd args extra_args
+
 
   let clean t pkg extra_args =
     match var_choose t.cmd_clean with
@@ -5268,6 +6338,7 @@ module CustomPlugin = struct
       | _ ->
           ()
 
+
   let distclean t pkg extra_args =
     match var_choose t.cmd_distclean with
       | Some (cmd, args) ->
@@ -5275,20 +6346,21 @@ module CustomPlugin = struct
       | _ ->
           ()
 
+
   module Build =
-  struct 
+  struct
     let main t pkg extra_args =
       main t pkg extra_args;
       List.iter
         (fun sct ->
            let evs =
-             match sct with 
+             match sct with
                | Library (cs, bs, lib) when var_choose bs.bs_build ->
                    begin
-                     let evs, _ = 
-                       BaseBuilt.of_library 
+                     let evs, _ =
+                       BaseBuilt.of_library
                          OASISHostPath.of_unix
-                         (cs, bs, lib) 
+                         (cs, bs, lib)
                      in
                        evs
                    end
@@ -5329,6 +6401,7 @@ module CustomPlugin = struct
       distclean t pkg extra_args
   end
 
+
   module Test =
   struct
     let main t pkg (cs, test) extra_args =
@@ -5336,7 +6409,7 @@ module CustomPlugin = struct
         main t pkg extra_args;
         0.0
       with Failure s ->
-        BaseMessage.warning 
+        BaseMessage.warning
           (f_ "Test '%s' fails: %s")
           cs.cs_name
           s;
@@ -5346,9 +6419,10 @@ module CustomPlugin = struct
       clean t pkg extra_args
 
     let distclean t pkg (cs, test) extra_args =
-      distclean t pkg extra_args 
+      distclean t pkg extra_args
   end
 
+
   module Doc =
   struct
     let main t pkg (cs, _) extra_args =
@@ -5363,10 +6437,11 @@ module CustomPlugin = struct
       distclean t pkg extra_args
   end
 
+
 end
 
 
-# 5369 "setup.ml"
+# 6444 "setup.ml"
 open OASISTypes;;
 
 let setup_t =
@@ -5393,8 +6468,8 @@ let setup_t =
                  (OASISExpr.EBool true,
                    Some (("PREFIX=$prefix", ["omake"; "clean"])))
               ];
-            cmd_distclean = [(OASISExpr.EBool true, None)];
-            };
+            cmd_distclean = [(OASISExpr.EBool true, None)]
+         };
      test = [];
      doc = [];
      install =
@@ -5406,19 +6481,28 @@ let setup_t =
                    ("PREFIX=$prefix", ["omake"; "install"]))
               ];
             cmd_clean = [(OASISExpr.EBool true, None)];
-            cmd_distclean = [(OASISExpr.EBool true, None)];
-            };
+            cmd_distclean = [(OASISExpr.EBool true, None)]
+         };
      uninstall =
        CustomPlugin.main
          {
             CustomPlugin.cmd_main =
               [
                  (OASISExpr.EBool true,
-                   ("PREFIX=$prefix", ["omake"; "uninstall"]))
+                   ("yes",
+                     [
+                        "no";
+                        "|";
+                        "omake";
+                        "--install;";
+                        "PREFIX=$prefix";
+                        "omake";
+                        "uninstall"
+                     ]))
               ];
             cmd_clean = [(OASISExpr.EBool true, None)];
-            cmd_distclean = [(OASISExpr.EBool true, None)];
-            };
+            cmd_distclean = [(OASISExpr.EBool true, None)]
+         };
      clean =
        [
           CustomPlugin.Build.clean
@@ -5441,8 +6525,8 @@ let setup_t =
                     (OASISExpr.EBool true,
                       Some (("PREFIX=$prefix", ["omake"; "clean"])))
                  ];
-               cmd_distclean = [(OASISExpr.EBool true, None)];
-               };
+               cmd_distclean = [(OASISExpr.EBool true, None)]
+            };
           CustomPlugin.clean
             {
                CustomPlugin.cmd_main =
@@ -5451,18 +6535,27 @@ let setup_t =
                       ("PREFIX=$prefix", ["omake"; "install"]))
                  ];
                cmd_clean = [(OASISExpr.EBool true, None)];
-               cmd_distclean = [(OASISExpr.EBool true, None)];
-               };
+               cmd_distclean = [(OASISExpr.EBool true, None)]
+            };
           CustomPlugin.clean
             {
                CustomPlugin.cmd_main =
                  [
                     (OASISExpr.EBool true,
-                      ("PREFIX=$prefix", ["omake"; "uninstall"]))
+                      ("yes",
+                        [
+                           "no";
+                           "|";
+                           "omake";
+                           "--install;";
+                           "PREFIX=$prefix";
+                           "omake";
+                           "uninstall"
+                        ]))
                  ];
                cmd_clean = [(OASISExpr.EBool true, None)];
-               cmd_distclean = [(OASISExpr.EBool true, None)];
-               }
+               cmd_distclean = [(OASISExpr.EBool true, None)]
+            }
        ];
      clean_test = [];
      clean_doc = [];
@@ -5488,8 +6581,8 @@ let setup_t =
                     (OASISExpr.EBool true,
                       Some (("PREFIX=$prefix", ["omake"; "clean"])))
                  ];
-               cmd_distclean = [(OASISExpr.EBool true, None)];
-               };
+               cmd_distclean = [(OASISExpr.EBool true, None)]
+            };
           CustomPlugin.distclean
             {
                CustomPlugin.cmd_main =
@@ -5498,18 +6591,27 @@ let setup_t =
                       ("PREFIX=$prefix", ["omake"; "install"]))
                  ];
                cmd_clean = [(OASISExpr.EBool true, None)];
-               cmd_distclean = [(OASISExpr.EBool true, None)];
-               };
+               cmd_distclean = [(OASISExpr.EBool true, None)]
+            };
           CustomPlugin.distclean
             {
                CustomPlugin.cmd_main =
                  [
                     (OASISExpr.EBool true,
-                      ("PREFIX=$prefix", ["omake"; "uninstall"]))
+                      ("yes",
+                        [
+                           "no";
+                           "|";
+                           "omake";
+                           "--install;";
+                           "PREFIX=$prefix";
+                           "omake";
+                           "uninstall"
+                        ]))
                  ];
                cmd_clean = [(OASISExpr.EBool true, None)];
-               cmd_distclean = [(OASISExpr.EBool true, None)];
-               }
+               cmd_distclean = [(OASISExpr.EBool true, None)]
+            }
        ];
      distclean_test = [];
      distclean_doc = [];
@@ -5518,6 +6620,8 @@ let setup_t =
           oasis_version = "0.2";
           ocaml_version = None;
           findlib_version = None;
+          alpha_features = [];
+          beta_features = [];
           name = "ocamltter";
           version = "2.1.0";
           license =
@@ -5526,8 +6630,8 @@ let setup_t =
                  {
                     OASISLicense.license = "LGPL";
                     excption = Some "OCaml linking";
-                    version = OASISLicense.Version "2.0";
-                    });
+                    version = OASISLicense.Version "2.0"
+                 });
           license_file = None;
           copyrights = [];
           maintainers = [];
@@ -5536,55 +6640,56 @@ let setup_t =
           synopsis = "The OCAMLTTER twitter client";
           description = None;
           categories = [];
-          conf_type = (`Configure, "internal", Some "0.3");
+          conf_type = (`Configure, "internal", Some "0.4");
           conf_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
+               post_command = [(OASISExpr.EBool true, None)]
+            };
           build_type = (`Build, "Custom", Some "0.2");
           build_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
+               post_command = [(OASISExpr.EBool true, None)]
+            };
           install_type = (`Install, "Custom", Some "0.2");
           install_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
+               post_command = [(OASISExpr.EBool true, None)]
+            };
           uninstall_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
+               post_command = [(OASISExpr.EBool true, None)]
+            };
           clean_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
+               post_command = [(OASISExpr.EBool true, None)]
+            };
           distclean_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
+               post_command = [(OASISExpr.EBool true, None)]
+            };
           files_ab = [];
           sections = [];
           plugins = [(`Extra, "StdFiles", Some "0.2")];
+          disable_oasis_section = [];
           schema_data = PropList.Data.create ();
-          plugin_data = [];
-          };
+          plugin_data = []
+       };
      oasis_fn = Some "_oasis";
-     oasis_version = "0.3.0";
-     oasis_digest = Some "\148\204\201&\210\147}\214.;\217T\211!\229y";
+     oasis_version = "0.4.6";
+     oasis_digest = Some "\135d\251\133c\193R[\203t\206\250\2315\152>";
      oasis_exec = None;
      oasis_setup_args = [];
-     setup_update = false;
-     };;
+     setup_update = false
+  };;
 
 let setup () = BaseSetup.setup setup_t;;
 
-# 5589 "setup.ml"
+# 6694 "setup.ml"
 (* OASIS_STOP *)
 let () = setup ();;
