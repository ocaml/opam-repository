opam-version: "2.0"
maintainer: "Christiano F. Haesbaert <haesbaert@haesbaert.org>"
authors: "Christiano F. Haesbaert <haesbaert@haesbaert.org>"
license: "ISC"
homepage: "https://github.com/haesbaert/rawlink"
bug-reports: "https://github.com/haesbaert/rawlink/issues"
dev-repo: "git+https://github.com/haesbaert/rawlink.git"
doc: "https://haesbaert.github.io/rawlink/"
build: [
  [ "dune" "subst" ] {dev}
  [ "dune" "build" "-p" name "-j" jobs ] ]
depends: [
  "ocaml" {>= "5.0.0"}
  "dune"
  "rawlink"
  "eio" {>= "0.4"}
]
depexts: [
  ["linux-headers"] {os-distribution = "alpine"}
]
synopsis: "Portable library to read and write raw packets with EIO bindings"
description: """
Rawlink is an ocaml library for sending and receiving raw packets at the link
layer level. Sometimes you need to have full control of the packet, including
building the full ethernet frame.

The API is platform independent, it uses BPF on real UNIXes and AF_SOCKET on
linux. Some functionality is sacrificed so that the API is portable enough.

Currently BPF and AF_PACKET are implemented, including filtering capabilities.
Writing a BPF program is a pain in the ass, so no facilities are provided for
it. If you need a BPF filter, I suggest you write a small .c file with a
function that returns the BPF program as a string, check `rawlink_stubs.c` for
an example.

This version of Rawlink is to be used with Eio, the IO functions will produce
EIO effects.
"""
url {
  src:
    "https://github.com/haesbaert/rawlink/releases/download/v2.0/rawlink-2.0.tbz"
  checksum: [
    "sha256=50f76e18ce32461968b2a1d632b0fdf6ef3102b1dad33e5e976fc96ba4914b7d"
    "sha512=90df13e2c8fd2822d9dc41a93d58f6716c9c9636bce32aa8c0ea670df2d82c93587308f1a5e22dc55ebce9cdc98e12beacf9e049831bed5403449897f4dbaab1"
  ]
}
x-commit-hash: "8c705a242ea0abca55dee19bb8f1e3b9c6572f83"
