opam-version: "2.0"
maintainer: "gerson.xp@gmail.com"
authors: "Gerson Moraes"
homepage: "https://github.com/gersonmoraes/dryunit"
bug-reports: "https://github.com/gersonmoraes/dryunit"
dev-repo: "git+https://github.com/gersonmoraes/dryunit.git"
build: [
  ["jbuilder" "subst" "-p" name] {pinned}
  ["jbuilder" "build" "-p" name "-j" jobs]
]

depends: [
  "ocaml" {>= "4.02.3"}
  "jbuilder" {build}
  "cppo" {build}
  "cmdliner" {>= "1.0.2"}
]
synopsis: "A detection tool for traditional and popular testing frameworks"
description: """
It works with Alcotest or OUnit 2. It's fast. Everything processed
(with the help of OCaml's parser) is cached - *you can choose where*.
It's intuitive. You can get started with the command line
(be that with templates or `--help`).

No bootstrapping is required and you can keep all your tooling when
writing tests. No compromises on the syntax. *It's as clean as it gets*. You can
see the generated tests running `dryunit gen --framework alcotest` from the
test dir.

If you use jbuilder just run:

```sh
# Setting up a virtual test executable
mkdir tests
dryunit init > tests/jbuild

# Adding a test
echo "let test_dummy () = ()" > tests/dummy_tests.ml

# Running things
jbuilder build tests/main.exe && _build/default/tests/main.exe
```

Integration with other building systems should be straightfoward."""
url {
  src: "https://github.com/gersonmoraes/dryunit/archive/0.5.0.tar.gz"
  checksum: "md5=7515b76f79bb53a5074c4d37f94f949d"
}
