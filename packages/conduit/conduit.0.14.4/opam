opam-version: "2.0"
maintainer: "anil@recoil.org"
authors: [
  "Anil Madhavapeddy" "Thomas Leonard" "Thomas Gazagnaire" "Rudi Grinberg"
]
homepage: "https://github.com/mirage/ocaml-conduit"
bug-reports: "https://github.com/mirage/ocaml-conduit/issues"
license: "ISC"
tags: "org:mirage"
dev-repo: "git+https://github.com/mirage/ocaml-conduit.git"
build: [
  ["./configure"]
  [make]
  [make "doc"] {with-doc}
]
install: [make "install"]
remove: ["ocamlfind" "remove" "conduit"]
depends: [
  "ocaml" {>= "4.02.3"}
  "ocamlfind" {build}
  "ocamlbuild" {build}
  "ppx_driver" {build & < "v0.10.0"}
  "ppx_optcomp" {>= "113.24.00"}
  "ppx_sexp_conv"
  "sexplib"
  "stringext"
  "uri"
  "logs" {>= "0.5.0"}
  "cstruct" {>= "1.0.1"}
  "ipaddr" {>= "2.5.0" & < "2.8.0"}
]
depopts: [
  "async"
  "lwt"
  "ssl"
  "async_ssl"
  "mirage-dns"
  "vchan"
  "launchd"
  "tls"
  "mirage-types-lwt"
]
conflicts: [
  "lwt" {< "2.4.4"}
  "lwt" {>= "3.0.0"}
  "async_ssl" {< "112.24.00"}
  "async" {< "113.24.00"}
  "mirage-types" {< "2.0.0" & >= "3.0.0"}
  "dns" {< "0.10.0"}
  "tls" {< "0.4.0"}
  "vchan" {< "2.0.0"}
  "nocrypto" {< "0.4.0"}
]
synopsis: "Network connection library for TCP and SSL"
description: """
The `conduit` library takes care of establishing and listening for TCP and
SSL/TLS connections for the Lwt and Async libraries.

The reason this library exists is to provide a degree of abstraction
from the precise SSL library used, since there are a variety of ways to bind to
a library (e.g. the C FFI, or the Ctypes library), as well as well as which
library is used (either OpenSSL or a native OCaml TLS implementation).

If you are using the `Lwt_unix` version of the library, you can set two
environment variables to control the behaviour of the library:

- `CONDUIT_DEBUG=1` will output debug information to standard error.
- `CONDUIT_TLS=native` will force the use of the pure OCaml TLS library."""
flags: light-uninstall
url {
  src: "https://github.com/mirage/ocaml-conduit/archive/v0.14.4.tar.gz"
  checksum: "md5=671bc66a25c05ff37d36fcb731b9c8eb"
}
