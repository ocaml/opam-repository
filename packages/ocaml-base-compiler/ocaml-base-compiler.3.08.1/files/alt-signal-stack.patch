From ea1245f655aaf7881f34f6c47cf51ae4fe972db6 Mon Sep 17 00:00:00 2001
From: Xavier Leroy <xavierleroy@users.noreply.github.com>
Date: Fri, 5 Mar 2021 19:14:07 +0100
Subject: [PATCH] Dynamically allocate the alternate signal stack

In Glibc 2.34 and later, SIGSTKSZ may not be a compile-time constant.
It is no longer possible to statically allocate the alternate signal
stack for the main thread, as we've been doing for the last 25 years.

This commit implements dynamic allocation of the alternate signal stack
even for the main thread.  It reuses the code already in place to allocate
the alternate signal stack for other threads.

The alternate signal stack is freed when the main OCaml code / an OCaml thread
stops.

(partial back-port of PR#10266 and PR#10726)
---
 asmrun/fail.c    |  7 ++++-
 asmrun/signals.c | 70 ++++++++++++++++++++++++++++++++++++++++--------
 asmrun/startup.c |  3 +++
 byterun/sys.c    |  4 +++
 4 files changed, 72 insertions(+), 12 deletions(-)

diff --git a/asmrun/fail.c b/asmrun/fail.c
index d00014ef291..c0d54cae733 100644
--- a/asmrun/fail.c
+++ b/asmrun/fail.c
@@ -27,6 +27,8 @@
 #include "stack.h"
 #include "roots.h"
 
+extern void caml_terminate_signals(void);
+
 /* The globals holding predefined exceptions */
 
 typedef value caml_generated_constant[1];
@@ -55,7 +57,10 @@ char * caml_exception_pointer = NULL;
 void caml_raise(value v)
 {
   Unlock_exn();
-  if (caml_exception_pointer == NULL) caml_fatal_uncaught_exception(v);
+  if (caml_exception_pointer == NULL) {
+    caml_terminate_signals();
+    caml_fatal_uncaught_exception(v);
+  }
 
 #ifndef Stack_grows_upwards
 #define PUSHED_AFTER <
diff --git a/asmrun/signals.c b/asmrun/signals.c
index a6ce72ef7c5..cd4823285cc 100644
--- a/asmrun/signals.c
+++ b/asmrun/signals.c
@@ -528,7 +528,6 @@ static void trap_handler(int sig, int code, struct sigcontext * context)
 #ifdef HAS_STACK_OVERFLOW_DETECTION
 
 static char * system_stack_top;
-static char sig_alt_stack[SIGSTKSZ];
 
 static int is_stack_overflow(char * fault_addr)
 {
@@ -615,19 +614,68 @@ void caml_init_signals(void)
   {
     struct sigaltstack stk;
     struct sigaction act;
-    stk.ss_sp = sig_alt_stack;
-    stk.ss_size = SIGSTKSZ;
-    stk.ss_flags = 0;
+    /* Allocate and select an alternate stack for handling signals,
+       especially SIGSEGV signals.
+       The alternate stack used to be statically-allocated for the main thread,
+       but this is incompatible with Glibc 2.34 and newer, where SIGSTKSZ
+       may not be a compile-time constant. */
+    stk.ss_sp = malloc(SIGSTKSZ);
+    if (stk.ss_sp != NULL) {
+      stk.ss_size = SIGSTKSZ;
+      stk.ss_flags = 0;
 #if defined(TARGET_i386) && defined(SYS_linux_elf)
-    act.sa_handler = (void (*)(int)) segv_handler;
-    act.sa_flags = SA_ONSTACK | SA_NODEFER;
+      act.sa_handler = (void (*)(int)) segv_handler;
+      act.sa_flags = SA_ONSTACK | SA_NODEFER;
 #else
-    act.sa_sigaction = segv_handler;
-    act.sa_flags = SA_SIGINFO | SA_ONSTACK | SA_NODEFER;
+      act.sa_sigaction = segv_handler;
+      act.sa_flags = SA_SIGINFO | SA_ONSTACK | SA_NODEFER;
+#endif
+      sigemptyset(&act.sa_mask);
+      system_stack_top = (char *) &act;
+      if (sigaltstack(&stk, NULL) == 0)
+        sigaction(SIGSEGV, &act, NULL);
+      else
+        free(stk.ss_sp);
+    }
+  }
 #endif
-    sigemptyset(&act.sa_mask);
-    system_stack_top = (char *) &act;
-    if (sigaltstack(&stk, NULL) == 0) { sigaction(SIGSEGV, &act, NULL); }
+}
+
+/* Termination of signal stuff */
+
+#if defined(TARGET_power) || defined(TARGET_sparc) && (defined(SYS_solaris) \
+    || defined(SYS_sunos) || defined(SYS_bsd) || defined(SYS_linux)) \
+    || defined(HAS_STACK_OVERFLOW_DETECTION)
+static void set_signal_default(int signum)
+{
+  struct sigaction act;
+  sigemptyset(&act.sa_mask);
+  act.sa_handler = SIG_DFL;
+  act.sa_flags = 0;
+  sigaction(signum, &act, NULL);
+}
+#endif
+
+void caml_terminate_signals(void)
+{
+#if defined(TARGET_sparc) && (defined(SYS_solaris) || defined(SYS_sunos) \
+    || defined(SYS_bsd) || defined(SYS_linux))
+  set_signal_default(SIGILL);
+#endif
+
+#if defined(TARGET_power)
+  set_signal_default(SIGTRAP);
+#endif
+
+#ifdef HAS_STACK_OVERFLOW_DETECTION
+  set_signal_default(SIGSEGV);
+  stack_t oldstk, stk;
+  stk.ss_flags = SS_DISABLE;
+  if (sigaltstack(&stk, &oldstk) == 0) {
+    /* If caml_init_signals failed, we are not using an alternate signal stack.
+       SS_DISABLE will be set in oldstk, and there is nothing to free in this
+       case. */
+    if (! (oldstk.ss_flags & SS_DISABLE)) free(oldstk.ss_sp);
   }
 #endif
 }
diff --git a/asmrun/startup.c b/asmrun/startup.c
index 576c2c56c85..2e4e7bcc856 100644
--- a/asmrun/startup.c
+++ b/asmrun/startup.c
@@ -119,6 +119,7 @@ void (*caml_termination_hook)(void *) = NULL;
 extern value caml_start_program (void);
 extern void caml_init_ieee_floats (void);
 extern void caml_init_signals (void);
+extern void caml_terminate_signals(void);
 
 void caml_main(char **argv)
 {
@@ -150,10 +151,12 @@ void caml_main(char **argv)
 #endif
   caml_sys_init(exe_name, argv);
   if (sigsetjmp(caml_termination_jmpbuf.buf, 0)) {
+    caml_terminate_signals();
     if (caml_termination_hook != NULL) caml_termination_hook(NULL);
     return;
   }
   res = caml_start_program();
+  caml_terminate_signals();
   if (Is_exception_result(res))
     caml_fatal_uncaught_exception(Extract_exception(res));
 }
diff --git a/byterun/sys.c b/byterun/sys.c
index c5f5c60e146..6d48e753182 100644
--- a/byterun/sys.c
+++ b/byterun/sys.c
@@ -88,10 +88,14 @@ CAMLexport void caml_sys_error(value arg)
   CAMLnoreturn;
 }
 
+extern void caml_terminate_signals(void);
+
 CAMLprim value caml_sys_exit(value retcode)
 {
 #ifndef NATIVE_CODE
   caml_debugger(PROGRAM_EXIT);
+#else
+  caml_terminate_signals();
 #endif
   exit(Int_val(retcode));
   return Val_unit;
