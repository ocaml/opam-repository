opam-version: "2.0"
maintainer: "lebotlan@users.forge.ocamlcore.org"
authors: ["D. Le Botlan"]
homepage: "http://exenum.forge.ocamlcore.org/"
license: "GPL-3.0-only"
build: [
  ["ocaml" "setup.ml" "-configure" "--prefix" prefix]
  ["ocaml" "setup.ml" "-build"]
  ["ocaml" "setup.ml" "-doc"] {with-doc}
]
remove: [["ocamlfind" "remove" "exenum"]]
depends: [
  "ocaml" {< "4.06.0"}
  "ocamlfind"
  "ocamlbuild" {build}
  "num"
]
install: ["ocaml" "setup.ml" "-install"]
synopsis:
  "Build efficient enumerations for datatypes. Inspired by Feat for Haskell."
description: """
The exenum library offers constructors to build enumerations for
datatypes, that is, functions from (arbitrarily large) integers to
values. Such enumerations are typically used for unit testing. The
library is efficient: the n-th element of an enumeration is returned
without having computed the (n-1) previous elements. Complexity is in
log(n), except for some pathological datatypes.

Inspired by Feat: Functional Enumeration of Algebraic Types, by
Duregard, Jansson, Wang, Chalmers University.

As an example, consider the following datatype: type term = Var of
string | App of term * term | Lambda of string * term

Using exenum, one may easily generate zillions of different
lambda-terms. In our specific example, term number 2000000000000
happens to be ((((x v) (fun u -> y)) ((fun u -> y) (fun y -> y))) (((x
v) (fun u -> v)) (fun u -> y)))

Efficiency: computing lambda-term number 1E200 is instantaneous (on an
antique Intel Centrino)."""
flags: light-uninstall
url {
  src:
    "https://download.ocamlcore.org/exenum/exenum-source/0.6/exenum-source-0.6.tgz"
  checksum: "md5=ee90d1dd3c7664a2ee657597bafc064b"
}
