commit f7018163d9f83bc350911d76226d2cef2290e72d
Author: Romain Beauxis <toots@rastageeks.org>
Date:   Sun Sep 22 22:19:38 2013 -0400

    * Changed types to match new ocaml-ogg's API.
      Should be fully backward compatible.

diff --git a/src/ogg_formats/ogg_muxer.ml b/src/ogg_formats/ogg_muxer.ml
index 2a75910..350b84c 100644
--- a/src/ogg_formats/ogg_muxer.ml
+++ b/src/ogg_formats/ogg_muxer.ml
@@ -42,16 +42,16 @@ type track_data =
 
 type position = Unknown | Time of float
 
-type 'a track_encoder = 'a data -> Ogg.Stream.t -> (Ogg.Page.t -> unit) -> unit
+type 'a track_encoder = 'a data -> Ogg.Stream.stream -> (Ogg.Page.t -> unit) -> unit
 type page_end_time = Ogg.Page.t -> position
-type header_encoder = Ogg.Stream.t -> Ogg.Page.t
-type fisbone_packet = Ogg.Stream.t -> Ogg.Stream.packet option
-type stream_start = Ogg.Stream.t -> Ogg.Page.t list
-type end_of_stream = Ogg.Stream.t -> unit
+type header_encoder = Ogg.Stream.stream -> Ogg.Page.t
+type fisbone_packet = Ogg.Stream.stream -> Ogg.Stream.packet option
+type stream_start = Ogg.Stream.stream -> Ogg.Page.t list
+type end_of_stream = Ogg.Stream.stream -> unit
 
 type 'a stream = 
   {
-    os                : Ogg.Stream.t;
+    os                : Ogg.Stream.stream;
     encoder           : 'a track_encoder;
     end_pos           : page_end_time;
     page_fill         : int option;
@@ -76,7 +76,7 @@ type state = Eos | Streaming | Bos
 type t =
   {
     id               : string;
-    mutable skeleton : Ogg.Stream.t option;
+    mutable skeleton : Ogg.Stream.stream option;
     header           : Buffer.t;
     encoded          : Buffer.t;
     mutable position : float;
diff --git a/src/ogg_formats/ogg_muxer.mli b/src/ogg_formats/ogg_muxer.mli
index 6b25ef5..72071df 100644
--- a/src/ogg_formats/ogg_muxer.mli
+++ b/src/ogg_formats/ogg_muxer.mli
@@ -53,11 +53,11 @@ type track_data =
   * If the encoding process outputs ogg pages, then
   * the encoder should use the last argument to add its pages
   * to the stream. *)
-type 'a track_encoder = 'a data -> Ogg.Stream.t -> (Ogg.Page.t -> unit) -> unit
+type 'a track_encoder = 'a data -> Ogg.Stream.stream -> (Ogg.Page.t -> unit) -> unit
 
 (** Returns the first page of the stream,
   * to be placed at the very beginning. *)
-type header_encoder = Ogg.Stream.t -> Ogg.Page.t
+type header_encoder = Ogg.Stream.stream -> Ogg.Page.t
 
 (** Return the end time of a page, in milliseconds. *)
 type position = Unknown | Time of float
@@ -69,13 +69,13 @@ type page_end_time = Ogg.Page.t -> position
   * will contain the data for this stream to
   * put in the ogg skeleton, if enabled in
   * the encoder. *)
-type fisbone_packet = Ogg.Stream.t -> Ogg.Stream.packet option
+type fisbone_packet = Ogg.Stream.stream -> Ogg.Stream.packet option
 
 (** Returns the remaining header data, before data encoding starts. *)
-type stream_start = Ogg.Stream.t -> Ogg.Page.t list
+type stream_start = Ogg.Stream.stream -> Ogg.Page.t list
 
 (** Ends the track. *)
-type end_of_stream = Ogg.Stream.t -> unit
+type end_of_stream = Ogg.Stream.stream -> unit
 
 (** A data encoder is an encoder for either a audio or a video track. *)
 type data_encoder =
@@ -171,4 +171,4 @@ val end_of_stream : t -> unit
   (** {2 Utils} *)
 
 (** flush all availables pages from an ogg stream *)
-val flush_pages : Ogg.Stream.t -> Ogg.Page.t list
+val flush_pages : Ogg.Stream.stream -> Ogg.Page.t list
